"use strict";(self.webpackChunkwot_terms_docusaurus=self.webpackChunkwot_terms_docusaurus||[]).push([[43101],{15680:(e,t,r)=>{r.d(t,{xA:()=>f,yg:()=>d});var n=r(96540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},f=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),p=c(r),y=i,d=p["".concat(l,".").concat(y)]||p[y]||u[y]||a;return r?n.createElement(d,o(o({ref:t},f),{},{components:r})):n.createElement(d,o({ref:t},f))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},29372:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(58168),i=(r(96540),r(15680));const a={},o=void 0,s={unversionedId:"glossary/verifier",id:"glossary/verifier",title:"verifier",description:"Definition",source:"@site/docs/04_glossary/verifier.md",sourceDirName:"04_glossary",slug:"/glossary/verifier",permalink:"/WOT-terms/docs/glossary/verifier",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"verified-integrity",permalink:"/WOT-terms/docs/glossary/verified-integrity"},next:{title:"verify-signature",permalink:"/WOT-terms/docs/glossary/verify-signature"}},l={},c=[{value:"Definition",id:"definition",level:2},{value:"Explanation",id:"explanation",level:2},{value:"KERI related",id:"keri-related",level:2}],f={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(p,(0,n.A)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"definition"},"Definition"),(0,i.yg)("p",null,"any entity or agent that cryptographically verifies the signature(s) and digests on an event Message.",(0,i.yg)("br",{parentName:"p"}),"\n","Source Dr. S. Smith"),(0,i.yg)("h2",{id:"explanation"},"Explanation"),(0,i.yg)("p",null,"the entity that (cryptographically) verifies data received from peers (check structure, signatures, dates). More narrowly defined for the KERI suite: cryptographically verifies signature(s) on an event message."),(0,i.yg)("p",null,"Notice the subtile difference between ",(0,i.yg)("a",{parentName:"p",href:"validator"},"validator")," and verifier."),(0,i.yg)("h2",{id:"keri-related"},"KERI related"),(0,i.yg)("p",null,"Any entity or agent that cryptographically verifies the signature(s) and/or digests on an event message. In order to verify a signature, a verifier must first determine which set of keys are or were the controlling set for an identifier when an event was issued. In other words, a verifier must first establish control authority for an identifier. For identifiers that are declared as non-transferable at inception, this control establishment merely requires a copy of the inception event for the identifier. For identifiers that are declared transferable at inception, this control establishment requires a complete copy of the sequence of establishment events (inception and all rotations) for the identifier up to the time at which the statement was issued.",(0,i.yg)("br",{parentName:"p"}),"\n","Source ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/WebOfTrust/ietf-keri/blob/main/draft-ssmith-keri.md#basic-terminology"},"Sam Smith")))}u.isMDXComponent=!0}}]);