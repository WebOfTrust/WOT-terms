"use strict";(self.webpackChunkwot_terms_docusaurus=self.webpackChunkwot_terms_docusaurus||[]).push([[1617],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),h=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=h(e.components);return a.createElement(r.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=h(n),c=o,k=d["".concat(r,".").concat(c)]||d[c]||p[c]||s;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=c;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var h=2;h<s;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var a=n(87462),o=(n(67294),n(3905));const s={title:"Let's KERI on together"},i=void 0,l={unversionedId:"Video/lets-keri-on-together",id:"Video/lets-keri-on-together",title:"Let's KERI on together",description:"The video",source:"@site/docs/Video/lets-keri-on-together.md",sourceDirName:"Video",slug:"/Video/lets-keri-on-together",permalink:"/WOT-terms/docs/Video/lets-keri-on-together",draft:!1,tags:[],version:"current",frontMatter:{title:"Let's KERI on together"},sidebar:"tutorialSidebar",previous:{title:"TEST3",permalink:"/WOT-terms/docs/Test/term_test3"},next:{title:"Kent Bull viz",permalink:"/WOT-terms/docs/Visualisations/Kent Bull viz"}},r={},h=[{value:"The video",id:"the-video",level:2},{value:"The subtitles as text",id:"the-subtitles-as-text",level:2}],u={toc:h},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"the-video"},"The video"),(0,o.kt)("video",{controls:!0,src:"https://dwarshuis.com/video/WOT-terms/video1663530585.mp4",playsInline:!0,poster:"https://dwarshuis.com/video/WOT-terms/WOT-educational-video.png"}),(0,o.kt)("div",{className:"subtitlecontainer alert alert--info margin-bottom--lg"},"okay and I will show slides all right so this\xa0is the presentation I did at IIW called 'Let's"),(0,o.kt)("div",{className:"counter"}),(0,o.kt)("h2",{id:"the-subtitles-as-text"},"The subtitles as text"),(0,o.kt)("div",{className:"no-video-insert"},"0:00:00.080,0:00:00.800 paracore",(0,o.kt)("p",null,"0:00:03.520,0:00:12.480\nokay and I will show slides all right so this\xa0\nis the presentation I did at IIW called 'Let's"),(0,o.kt)("p",null,"0:00:12.480,0:00:20.640\nKERI on together'. I did the presentation,\xa0\nI did the card at IIW with instructions on"),(0,o.kt)("p",null,"0:00:20.640,0:00:26.880\nhow to pull the software and get ready so you\xa0\ncould run alongside the demo if you so chose."),(0,o.kt)("p",null,"0:00:27.600,0:00:33.120\nNo one did, which was a little bit disappointing,\xa0\nbut the repo is here, it's the KERI, right, KERIpy"),(0,o.kt)("p",null,"0:00:33.120,0:00:39.680\nrepo the web of trust it's a lot of\xa0\nthe all of the networking and asynchronous"),(0,o.kt)("p",null,"0:00:41.840,0:00:49.840\nI/O is based on co-routines in a library\xa0\nSam Smith created called 'hio' right now"),(0,o.kt)("p",null,"0:00:49.840,0:00:54.000\nwhat I'll be running today requires\xa0\nPython 3.9.7 but we're now up to 3.10.3"),(0,o.kt)("p",null,"0:00:55.200,0:00:58.960\nand these are the instructions if you\xa0\nwanted to follow along let me get clone"),(0,o.kt)("p",null,"0:01:00.000,0:01:04.320\nthe repo itself check out the future 'iiw'\xa0\nbranch and then just run a ",(0,o.kt)("inlineCode",{parentName:"p"},"pip install")),(0,o.kt)("p",null,"0:01:05.120,0:01:12.960\nof the requirements file, to get all of the\xa0\ndependencies. So most of actually everything"),(0,o.kt)("p",null,"0:01:12.960,0:01:18.720\nthat we'll be showing today, starts with the\xa0\nKERI command line interface that we call 'kli'."),(0,o.kt)("p",null,"0:01:18.720,0:01:26.080\nIt has commands and sub commands much like, if you're\xa0\nfamiliar with Kubernetes' \"kubectl\" command line,"),(0,o.kt)("p",null,"0:01:26.080,0:01:29.840\nso that for example if you were doing some\xa0\nsomething with verifiable credentials you would"),(0,o.kt)("p",null,"0:01:29.840,0:01:36.080\nstart 'kli vc' and then there would be a sub command\xa0\nfollowing after the 'vc' for example 'issue' or 'revoke'"),(0,o.kt)("p",null,"0:01:38.320,0:01:46.640\nAnd then we do have Docker containers\xa0\nthat have all of the code pushed and configured"),(0,o.kt)("p",null,"0:01:46.640,0:01:53.440\nready to run so you can pull one of those\xa0\nand do a 'docker run', running a sub shell"),(0,o.kt)("p",null,"0:01:53.440,0:02:00.960\nand you can use the kli to perform tasks so\xa0\nthe basic structure for the commands in the kli"),(0,o.kt)("p",null,"0:02:01.840,0:02:07.840\nthe groups that we have, pardon me, the agent group\xa0\nfor running our cloud agent which is also run"),(0,o.kt)("p",null,"0:02:09.200,0:02:16.800\nin the distributable desktop application\xa0\nwe're building using Py installer and"),(0,o.kt)("p",null,"0:02:16.800,0:02:23.200\nElectron to bundle KERIpy behind\xa0\na web-U/I that web-U/I uses the agent"),(0,o.kt)("p",null,"0:02:24.880,0:02:29.600\nif you want to perform some delegation commands\xa0\nthere's a couple of sub commands under delegate"),(0,o.kt)("p",null,"0:02:29.600,0:02:34.320\nif you want to create a distributed multi-sig\xa0\nidentifier you would use the multisig commands"),(0,o.kt)("p",null,"0:02:34.320,0:02:38.560\nand then the verifiable credentials I mentioned\xa0\nthe wallet commands are simply for listing the"),(0,o.kt)("p",null,'0:02:38.560,0:02:44.560\ncontents of your wallet and by "wallet" I\xa0\nmean verifiable credential wallet and then'),(0,o.kt)("p",null,"0:02:44.560,0:02:50.320\nto start witnesses or watchers you would use\xa0\nthe watcher group with sub cmnds like 'start'&'demo'"),(0,o.kt)("p",null,"0:02:51.200,0:02:58.640\nSteven: So, Phil, all these ..., well everything\xa0\non this page, is there documentation as to"),(0,o.kt)("p",null,"0:02:58.640,0:03:06.240\nwhat exactly an 'agent' means like do you have the\xa0\nterminology somewhere? Phil: No, there isn't, {Now there is!, ed.}"),(0,o.kt)("p",null,"0:03:06.240,0:03:13.440\nbut that would be a good thing to add to a getting started\xa0\nI guess. Steven: yeah absolutely, so I mean could"),(0,o.kt)("p",null,"0:03:13.440,0:03:20.880\ncertainly create like a vocabulary dictionary\xa0\nand then maybe a one-liner description"),(0,o.kt)("p",null,'0:03:20.880,0:03:28.400\nof what each like "run cloud agent" does,\xa0what\ndelegation means. Phil: yeah that would be great.'),(0,o.kt)("p",null,"0:03:28.400,0:03:30.720\n{Available! See the glossary in the Youtube description}"),(0,o.kt)("p",null,"0:03:30.720,0:03:46.800\nLook at command line, if you run just 'help' from the top level, \xa0\nit does list... Steven: can you share the screen?"),(0,o.kt)("p",null,"0:03:47.440,0:03:53.360\nPhil: I'm sharing just this spreadsheet, I mean just the\xa0\npresentation on there, let me show that desktop"),(0,o.kt)("p",null,"0:03:56.000,0:03:59.200\nthere we go, okay can you see\xa0\nthe command line now? Steven: yeah"),(0,o.kt)("p",null,"0:03:59.200,0:04:04.480\nPhil: OK, so if you run 'kli --help' you get a list of\xa0\nthe commands and sub commands and they do have"),(0,o.kt)("p",null,"0:04:05.440,0:04:10.000\none liners not all of them are accurate\xa0\nat this moment but that's something that..."),(0,o.kt)("p",null,"0:04:10.000,0:04:15.840\nSteven: doesn't matter, it'll be a placeholder\nin the worst case scenario."),(0,o.kt)("p",null,"0:04:16.400,0:04:21.360\nokay, so for key management the top level commands\xa0\nthe the very first thing you almost always do"),(0,o.kt)("p",null,"0:04:21.360,0:04:27.920\nis do an 'init' which initializes both your data\xa0\nstore and your encrypted key store, 'incept' for"),(0,o.kt)("p",null,"0:04:27.920,0:04:32.960\ncreating a single-sig identifier, technically you\xa0\ncan create multi-sig identifiers with that as well,"),(0,o.kt)("p",null,"0:04:33.600,0:04:37.120\nbut they're not all that interesting. Because\xa0\nall the keys are stored in the same key store"),(0,o.kt)("p",null,"0:04:39.440,0:04:44.400\nthe different key events that you can create\xa0\nan interaction event or a rotation event"),(0,o.kt)("p",null,"0:04:45.040,0:04:48.480\nare handled with the next two commands\xa0\n'interact' and 'rotate' and they each take"),(0,o.kt)("p",null,"0:04:48.480,0:04:54.160\nparameters, 'rotation' for example, specifying your\xa0\nsigning thresholds number of keys rotating in"),(0,o.kt)("p",null,"0:04:54.160,0:05:00.000\nand out witnesses all the things that you can do\xa0\nwhen rotating and 'purge' just deletes your key store"),(0,o.kt)("p",null,"0:05:01.600,0:05:09.040\nso then the miscellaneous commands querying\xa0\nfor creating witnesses for a KEL. Sending your"),(0,o.kt)("p",null,"0:05:09.040,0:05:14.240\nKEL to another agent; we don't use that very much\xa0\nanymore because we use OOBIs to accomplish that now."),(0,o.kt)("p",null,"0:05:15.120,0:05:23.120\nSigning, pardon me, you can just sign our arbitrary\xa0\ndata and it will return the signatures based on"),(0,o.kt)("p",null,"0:05:23.120,0:05:27.520\nthe identifier that you used and we'll be done\xa0\nI'll be demoing that in a little bit. Verifying"),(0,o.kt)("p",null,"0:05:27.520,0:05:32.000\nthose signatures and if you're you know if you're\xa0\njust exchanging signed data with someone via an"),(0,o.kt)("p",null,"0:05:32.000,0:05:36.800\ne-mail this will accomplish that\xa0\nfor you. Then 'list'ing the identifiers that"),(0,o.kt)("p",null,"0:05:36.800,0:05:42.880\nyou're creating and giving a 'status' of a single\xa0\nidentifier. So it's important to point out that"),(0,o.kt)("p",null,"0:05:44.240,0:05:51.840\nwith the most recent updates to KERIpy,\nwe now have first class support {ringing silenced}"),(0,o.kt)("p",null,"0:05:57.040,0:06:02.480\nWe now have first class support for multiple\xa0\nidentifiers multiple local identifiers,"),(0,o.kt)("p",null,"0:06:03.760,0:06:07.040\nso that's why we have the 'list' command\xa0\nso you can create in you can run"),(0,o.kt)("p",null,"0:06:07.040,0:06:10.560\n'init' once create a single data store\xa0\nand key store and then run 'incept' as"),(0,o.kt)("p",null,"0:06:10.560,0:06:13.600\nmany times you want to create other\xa0\nidentifiers and you use those for"),(0,o.kt)("p",null,"0:06:13.600,0:06:20.320\nlike peer-to-peer communications and things like\xa0\nthat, so that you can't be correlated. All right"),(0,o.kt)("p",null,"0:06:22.640,0:06:29.120\nso each of the three top level runnable components\xa0\nan agent a witness or a watcher each have"),(0,o.kt)("p",null,"0:06:31.280,0:06:39.520\nvarious startup commands. You have the 'bootstrap'\ncommand to start an empty agent or to run a single"),(0,o.kt)("p",null,"0:06:39.520,0:06:44.800\nagent against one that's already been started. You\xa0\ncan run 'start' and then both for witnesses and for"),(0,o.kt)("p",null,"0:06:44.800,0:06:50.480\nagents we have these 'demo' commands which we make\xa0\nheavy use of for local testing. So, for example"),(0,o.kt)("p",null,'0:06:50.480,0:06:55.920\nunder the witness this starts up three well-known\xa0\nwitnesses and by "well-known" I mean we use salts'),(0,o.kt)("p",null,"0:06:55.920,0:07:02.720\nto initialize their key stores so that the you\xa0\ncan predict what identifiers will be created and"),(0,o.kt)("p",null,"0:07:02.720,0:07:09.760\nagain that's not anything that you'd want\nto do in a production environment,"),(0,o.kt)("p",null,"0:07:09.760,0:07:14.240\nbut for running tests, and we'll be using\xa0\nparticularly the 'demo' witness command later on"),(0,o.kt)("p",null,"0:07:15.120,0:07:19.200\nto start witnesses so that other commands\xa0\nthat need witnesses know where to find them."),(0,o.kt)("p",null,"0:07:20.320,0:07:26.720\nAnd then we have similar commands for watchers.\xa0\nPart of the demo today is running through a"),(0,o.kt)("p",null,"0:07:26.720,0:07:31.920\nseries of scripts that we've created in the\xa0\ndemo directory located in keripy/scripts/demo"),(0,o.kt)("p",null,"0:07:33.360,0:07:38.960\nand the most basic one is just 'demo-script' which\xa0\nstarts off and runs all the really basic commands"),(0,o.kt)("p",null,"0:07:39.520,0:07:43.840\n'demo-witness-script' runs through some of the same\xa0\ncommands but requiring witnesses to be running"),(0,o.kt)("p",null,"0:07:44.720,0:07:50.160\nand then we get into the more interesting\xa0\nstuff: delegation and multi-sig"),(0,o.kt)("p",null,"0:07:50.160,0:07:54.800\nmulti-sig delegation where both parties of\xa0\nthe delegation are a multi-sig identifier"),(0,o.kt)("p",null,"0:07:54.800,0:07:59.920\nand then credential issuance and multi-issuance.\xa0\nDuring the demo at IIW we did not get to these."),(0,o.kt)("p",null,"0:08:00.720,0:08:05.360\nWe only got this far and in an hour. I'm not\xa0\nsure we'll even get to these, but we will see."),(0,o.kt)("p",null,"0:08:08.320,0:08:15.760\nOh, I forgot to point out the all of the sample\xa0\nJSON files are also located in keripy/tests/app/cli,"),(0,o.kt)("p",null,"0:08:15.760,0:08:25.360\nwhich contains the ..., when you do a 'kli incept'\xa0\ncommand, it takes a file for all the properties"),(0,o.kt)("p",null,"0:08:25.360,0:08:30.560\nthat you want to pass in for the creation of that\xa0\nidentifier, for example how many signature or how"),(0,o.kt)("p",null,"0:08:30.560,0:08:34.880\nmany public keys to create, what's your signing\xa0\nthresholds, how many / what witnesses to use, whether"),(0,o.kt)("p",null,"0:08:34.880,0:08:39.840\nit's transferable or not, et cetera and\xa0\nI'll show these as we go through them today"),(0,o.kt)("p",null,"0:08:42.320,0:08:47.360\nand then finally another big enhancement in\xa0\nthis most recent round of changes to KERIpy"),(0,o.kt)("p",null,"0:08:47.920,0:08:53.840\nwas the addition of out-of-band\xa0\nintroductions or OOBIs. They are files,"),(0,o.kt)("p",null,"0:08:54.560,0:09:00.400\nthese are startup files that contain bootstrap\xa0\nOOBIs. So for example when we use the 'demo'"),(0,o.kt)("p",null,"0:09:00.400,0:09:04.800\ncommand for witnesses, like I said: they're\xa0\nwell-known identifiers, they also start up"),(0,o.kt)("p",null,"0:09:04.800,0:09:08.720\non well-known ports and they publish those\xa0\nports via a series of OOBIs. This is a"),(0,o.kt)("p",null,"0:09:08.720,0:09:14.880\nconfiguration file that any other agent can run\xa0\nand know exactly how to contact those witnesses"),(0,o.kt)("p",null,"0:09:16.000,0:09:19.120\nand this is the configuration file for those\xa0\nwitnesses, so we'll get to those in a minute."),(0,o.kt)("p",null,"0:09:20.000,0:09:26.080\nSo that's it for the, pardon me, that's it for\xa0\nthe presentation there's not slides anyway"),(0,o.kt)("p",null,"0:09:26.080,0:09:30.240\nthere's not that much in terms of slides,\xa0\nhere's just enough to get this kick-started."),(0,o.kt)("p",null,"0:09:32.720,0:09:38.560\nSo now we'll go over to our first script today.\xa0\nOh, one thing I didn't point out, but I wanted to"),(0,o.kt)("p",null,"0:09:38.560,0:09:44.000\nmake clear: because we have the kli which you\xa0\ncan do everything you need to do with KERI"),(0,o.kt)("p",null,"0:09:44.640,0:09:48.640\nin KERIpy with the kli on a command line\xa0\nand that's for running in a mode where you're"),(0,o.kt)("p",null,"0:09:48.640,0:09:54.640\nnot always on the internet. But as I pointed\xa0\nout also, we have an agent that can run."),(0,o.kt)("p",null,"0:09:54.640,0:09:58.800\nThat could be a continuous or persistent connection\xa0\nto the internet. So a cloud agent for example."),(0,o.kt)("p",null,"0:10:00.240,0:10:05.760\nAnd in that case the cloud agent exposes a\xa0\nseries of REST APIs that perform the exact same"),(0,o.kt)("p",null,"0:10:05.760,0:10:11.680\nfunctionality as all the kli things that we'll\xa0\nbe going through today. And in the demo scripts"),(0,o.kt)("p",null,"0:10:11.680,0:10:17.440\nthat you see here for every script starting with\xa0\n'delegate', there is a sister script next to it,"),(0,o.kt)("p",null,"0:10:17.440,0:10:22.320\n'-agent', that is the exact same command but\xa0\nwith a series of CURL POSTs, I'm sorry, the"),(0,o.kt)("p",null,"0:10:22.320,0:10:28.560\nexact same functionality, but executed as a\xa0\nseries of CURL POSTs against an agent, or PUTs"),(0,o.kt)("p",null,"0:10:31.600,0:10:35.440\n(and I'll show when we launch) the\xa0\nagent we also expose a swagger U/I,"),(0,o.kt)("p",null,"0:10:35.440,0:10:42.000\nwhich allows you, if you wanted, to execute\xa0\ncommands against it. I'll show that towards the end."),(0,o.kt)("p",null,"0:10:44.880,0:10:47.280\nSo let's start with the basic 'demo' script."),(0,o.kt)("p",null,"0:10:49.840,0:10:55.920\nI'll zoom in here a little bit, is that\xa0\nlegible for you? Steven: yeah, I'm much better now."),(0,o.kt)("p",null,"0:10:57.760,0:11:05.760\nOkay so, the very first thing this does is create\xa0\na key store within it. Currently KERI now supports"),(0,o.kt)("p",null,"0:11:06.560,0:11:11.360\nthe ability to create a key store and data store\xa0\nfor that matter with a passcode and when you"),(0,o.kt)("p",null,"0:11:11.360,0:11:16.400\ndo that, it becomes an encryption key. like it's\xa0\nstretched into an encryption key that is used for"),(0,o.kt)("p",null,"0:11:17.440,0:11:24.160\nencrypting the key store so that no one\xa0\nelse can gain access to your private keys"),(0,o.kt)("p",null,"0:11:24.800,0:11:29.040\nthat passcode is never stored\xa0\nanywhere within KERIpy or the agent"),(0,o.kt)("p",null,"0:11:29.040,0:11:33.520\nso it has to be protected by the user because\xa0\notherwise you can't get access to your keys"),(0,o.kt)("p",null,"0:11:34.400,0:11:41.840\nSteven: Sorry Phil give me one sec there's\xa0\njust something going on in here, one second"),(0,o.kt)("p",null,"0:11:45.000,0:11:55.000\n{What a perfect break for a small quiz!:}\n{How many new terms has Phil introduced so far?}"),(0,o.kt)("p",null,"0:11:55.500,0:12:05.520\n{The answer is: 55 terms that need explanation!}\n{Most of which are available; see description.}"),(0,o.kt)("p",null,"0:12:07.520,0:12:08.960\nSteven: sorry about that!\nPhil: no worries"),(0,o.kt)("p",null,"0:12:15.840,0:12:20.240\nOkay so, for all of the commands that we're\xa0\ngonna be running today, we just pass in the"),(0,o.kt)("p",null,"0:12:20.240,0:12:23.200\nflag '--nopasscode' so the keystore isn't\xa0\nencrypted. And that's just to make things"),(0,o.kt)("p",null,"0:12:23.200,0:12:27.120\neasier, so we're not passing passcodes around\xa0\nto every other command but anywhere where you"),(0,o.kt)("p",null,"0:12:27.680,0:12:32.640\nrun a subsequent command after 'init' you can\xa0\npass in '--passcode' and it'll unlock"),(0,o.kt)("p",null,"0:12:32.640,0:12:38.400\nthe keystore if it's indeed locked so the very\xa0\nfirst thing that this does is create a database"),(0,o.kt)("p",null,"0:12:38.400,0:12:43.680\nand key storage you can see from the comments\xa0\nthe name of the database, the name of this"),(0,o.kt)("p",null,"0:12:44.480,0:12:48.240\ninstance that you're creating, is\xa0\ncalled 'test' and that is used to create"),(0,o.kt)("p",null,"0:12:48.240,0:12:53.440\nthe directory structure for the databases\xa0\nthat support both the wallet and the key store."),(0,o.kt)("p",null,"0:12:55.520,0:13:00.800\nThose databases can go in one of three\xa0\nplaces. When configured properly you can"),(0,o.kt)("p",null,"0:13:00.800,0:13:06.640\ncreate a database and key store in '/temp'\xa0\nwhich obviously is used just for testing and"),(0,o.kt)("p",null,"0:13:06.640,0:13:13.360\nwe use that heavily when running all of our unit\xa0\ntests. If you have a directory called"),(0,o.kt)("p",null,"0:13:14.080,0:13:18.720\n'/user/local/var/keri', and the current user has\xa0\nwrite access to that directory it'll create"),(0,o.kt)("p",null,"0:13:18.720,0:13:22.480\nall the databases under there. And then they're\xa0\nprefixed with the name that you give it here."),(0,o.kt)("p",null,"0:13:23.680,0:13:28.720\nIf you don't have that directory the last place\xa0\nthat KERIpy attempts to create the data stores"),(0,o.kt)("p",null,"0:13:28.720,0:13:34.960\nis in your 'home directory.keri' and then it\xa0\nwould begin with 'test' for this one after that."),(0,o.kt)("p",null,"0:13:35.600,0:13:38.160\nSo those are the three places you\xa0\nwant to go look for your key stores"),(0,o.kt)("p",null,"0:13:41.280,0:13:44.240\nSo after it creates the key store, we're\xa0creating...\nSteven: Sorry, can you, when you"),(0,o.kt)("p",null,"0:13:45.760,0:13:51.280\nwould you define which one of those three places\xa0\nto look for here? Phil: No. Steven: or it's just the way"),(0,o.kt)("p",null,"0:13:51.280,0:13:56.320\nyou're installed, you're just, you're set up\xa0\nPhil: that's correct, it's the way your system is set up"),(0,o.kt)("p",null,"0:13:56.320,0:14:01.760\nthere. we don't support the creation of temporary\xa0\nfrom the command line. We could add it as a flag,"),(0,o.kt)("p",null,"0:14:01.760,0:14:06.400\nI guess, but we don't currently support that.\xa0\nSo this will ...,from the command line, this will"),(0,o.kt)("p",null,"0:14:06.400,0:14:09.920\ncreate the key stored in either '/user/local/var/keri',\nif it exists and you have"),(0,o.kt)("p",null,"0:14:09.920,0:14:16.720\nwrite access to it, or under '.keri' in your\xa0\nown directory if you don't have that other one."),(0,o.kt)("p",null,"0:14:20.080,0:14:20.580\nUhm..."),(0,o.kt)("p",null,"0:14:23.600,0:14:28.240\nYeah, we could we could definitely add the ability\xa0\nto create a 'temp'(orary ed.) from here but that would"),(0,o.kt)("p",null,"0:14:28.240,0:14:32.960\njust be another flag so the first thing we create is\xa0\na non-transferable identifier after you give"),(0,o.kt)("p",null,"0:14:32.960,0:14:37.520\nthe name of the data stored you give a local\xa0\nhuman readable alias to this identifier and as"),(0,o.kt)("p",null,"0:14:37.520,0:14:41.360\ni mentioned you can support you can create\xa0\nmultiple identifiers so you would give them"),(0,o.kt)("p",null,"0:14:41.360,0:14:43.920\nper a single key store so you can\xa0\ngive them whatever aliases you want"),(0,o.kt)("p",null,"0:14:43.920,0:14:47.600\nSo that you can remember what you're\xa0\nusing that particular identifier for"),(0,o.kt)("p",null,"0:14:48.880,0:14:52.480\nSo this is creating a non-transferable\xa0\nidentifier. We'll start by opening that"),(0,o.kt)("p",null,"0:14:56.560,0:15:04.320\nSo, 'transferable=false' obviously\xa0and a\ntransferable identifier {<- slip of the tongue!}"),(0,o.kt)("p",null,"0:15:04.320,0:15:08.160\nOr a NON-transferable identifier in\xa0\nthis case, means that you cannot perform"),(0,o.kt)("p",null,"0:15:08.160,0:15:12.320\nany rotations against this (identifier ed.) You can't transfer\xa0\nto another set of keys that's why it's called"),(0,o.kt)("p",null,'0:15:12.320,0:15:19.280\n"non-transferable", so these are basically throwaway\xa0\nidentifiers. You use them for example witnesses'),(0,o.kt)("p",null,"0:15:19.280,0:15:23.200\nyou'd use non-transferable identifiers because\xa0\nthey themselves won't ever have any witnesses"),(0,o.kt)("p",null,"0:15:23.200,0:15:27.040\nthey don't perform rotations at all.\xa0\nIf you feel like a witness"),(0,o.kt)("p",null,"0:15:27.040,0:15:30.640\nhas been compromised, you just destroy that\xa0\nwitness and start over with a brand new one,"),(0,o.kt)("p",null,"0:15:30.640,0:15:34.720\nand rotate it out of your key store, out of\xa0\nyour identifier, that's using that witness."),(0,o.kt)("p",null,"0:15:37.120,0:15:42.560\nSo because it has no witnesses, 'toad' is the\xa0\nwitness threshold I have no idea why it's"),(0,o.kt)("p",null,'0:15:42.560,0:15:48.800\ncalled "toad"; that\'s a Sam-ism (Sam Smith, ed.). so we have a zero\xa0\nwitness threshold, because we have no witnesses the'),(0,o.kt)("p",null,"0:15:48.800,0:15:54.320\n'icount' is the number of signing keys to create,\xa0\nthe 'ncount' is the number of next keys. If you"),(0,o.kt)("p",null,"0:15:54.320,0:15:59.440\nyou're familiar with KERI pre-rotation, this is\xa0\nthe next keys to create and that these are the"),(0,o.kt)("p",null,"0:15:59.440,0:16:05.960\nsigning thresholds, 'i' for current signing threshold ('isith' ed.)\xa0\n'n' for next signing threshold ('nsith' ed.), and these have to be"),(0,o.kt)("p",null,"0:16:05.960,0:16:10.360\n'1' for transferable identifiers, across the\xa0\nboard, because they only support single sig"),(0,o.kt)("p",null,"0:16:12.400,0:16:18.240\nAll right, so, after we do that, we try and\xa0\nrotate this identifier and we capture the"),(0,o.kt)("p",null,"0:16:18.240,0:16:23.200\nfact that we should get an error, because you\xa0\ncan't rotate a non-transferable identifier."),(0,o.kt)("p",null,"0:16:25.360,0:16:36.080\nThen we move on and we create a\xa0\ntransferable identifier. Open that file"),(0,o.kt)("p",null,"0:16:36.080,0:16:38.320\nthe only difference between this and\xa0\nthe previous one, because we're not"),(0,o.kt)("p",null,"0:16:38.320,0:16:42.160\ngoing to do witnesses quite yet, is that\xa0\nwe have the flag 'transferable:' equals 'true'"),(0,o.kt)("p",null,"0:16:44.000,0:16:46.800\nand you'll notice when we create those\xa0\ntwo identifiers they have different"),(0,o.kt)("p",null,"0:16:47.520,0:16:53.520\nprefixes on the identifier which because\xa0\nall cryptographic material is encoded in"),(0,o.kt)("p",null,"0:16:53.520,0:16:57.920\nqualified Base64 we have a derivation code\xa0\non the beginning that indicates one is a"),(0,o.kt)("p",null,"0:16:57.920,0:17:03.840\nnon-transferable, and the other is a 'Blake3'\nhash of a transferable identifier; it's 'B' versus 'E'."),(0,o.kt)("p",null,"0:17:11.120,0:17:14.720\nSo after we create the transferable\xa0\nidentifier we then try and perform a"),(0,o.kt)("p",null,"0:17:14.720,0:17:19.520\nrotation event, which should work because this\xa0\nis transferable. We then rotate, and we anchor"),(0,o.kt)("p",null,"0:17:19.520,0:17:22.480\ndata into it (using '--data' tag, ed.),\nand in this case the anchor is"),(0,o.kt)("p",null,'0:17:24.560,0:17:29.520\njust a simple standard\xa0\nanchor for example for performing a "delegation"'),(0,o.kt)("p",null,"0:17:29.520,0:17:36.400\nor anchoring a transaction event log (TEL ed.) event into\xa0\nthis, and by anchoring we mean making"),(0,o.kt)("p",null,"0:17:36.400,0:17:40.960\na cryptographic commitment to whatever this\xa0\ndata points to. So, for example in delegation,"),(0,o.kt)("p",null,"0:17:40.960,0:17:45.840\nif I were being a delegator and someone\xa0\nrequested a rotation event, I would anchor,"),(0,o.kt)("p",null,"0:17:46.800,0:17:50.640\nI would create an anchor similar to this\xa0\nthis is okay this wouldn't be '0' but"),(0,o.kt)("p",null,"0:17:50.640,0:17:57.000\nokay, this is the prefix {<- Oops!} that I'm\xa0\napproving, the AID, sorry, that I'm approving"),(0,o.kt)("p",null,"0:17:57.280,0:18:01.360\nthis is the sequence number of the event that\xa0\nI'm approving and this is a digest of that event"),(0,o.kt)("p",null,"0:18:02.640,0:18:05.040\nsame thing if you were anchoring an issuance event"),(0,o.kt)("p",null,"0:18:05.840,0:18:09.440\nfrom a public transaction event log (PTEL ed.), it\xa0\nwould look exactly like this"),(0,o.kt)("p",null,"0:18:11.840,0:18:18.240\nSteven: And the sequence is for what? Phil: So remember,\nin key\xa0event logs key events are a sequence of events."),(0,o.kt)("p",null,"0:18:18.800,0:18:23.680\nSo you do the inception: 's=0', rotation 's=...'\netc etc, so that's an index into the"),(0,o.kt)("p",null,"0:18:23.680,0:18:31.520\nkey event log, that this event represents.\xa0\nWe perform an interaction event which anchors"),(0,o.kt)("p",null,"0:18:31.520,0:18:36.320\nthe exact same data just for testing purposes,\xa0\nobviously. Then we perform a rotation event that"),(0,o.kt)("p",null,"0:18:36.320,0:18:41.120\ngives us three keys with assigning threshold\xa0\nof two and then another rotation doing the same"),(0,o.kt)("p",null,"0:18:41.120,0:18:46.000\nthing, because remember, this is an interesting\xa0\nthing to remember about KERI,"),(0,o.kt)("p",null,"0:18:46.000,0:18:52.560\nbecause you do pre-rotation you need at least\xa0\ntwo rotations to get to a new number of next keys"),(0,o.kt)("p",null,"0:18:52.560,0:18:57.680\nSo when we first created these, if you remember, I\xa0\nhad a next key of '1' so after this rotation event"),(0,o.kt)("p",null,"0:18:58.720,0:19:02.240\nwe will only have one key because that's\xa0\nwhat we previously committed to but now we"),(0,o.kt)("p",null,"0:19:02.240,0:19:06.000\nprepare ourselves to have three keys\xa0\nif we perform another rotation event."),(0,o.kt)("p",null,"0:19:09.680,0:19:14.080\nThese are the sign&verify commands that I\xa0\nmentioned earlier. So we sign the data just signing"),(0,o.kt)("p",null,"0:19:14.080,0:19:17.840\nagain you can have any arbitrary data. You can\xa0\nspecify the data on the command line, if you want,"),(0,o.kt)("p",null,"0:19:17.840,0:19:25.200\nor if you use the '@' sign here, you can specify a\xa0\nfile to sign, and then we take the three signatures"),(0,o.kt)("p",null,"0:19:25.840,0:19:30.160\nand pass them into the 'verify' command against\xa0\nthe same data, using the same identifier that"),(0,o.kt)("p",null,"0:19:30.160,0:19:34.880\nsigned them, testing with the same identifier that\xa0\nsigned them, and we get whether they're verified or"),(0,o.kt)("p",null,"0:19:34.880,0:19:39.440\nverifiable, or not, and then in this last one\xa0(command, ed.)\nI just messed with the signed data to verify"),(0,o.kt)("p",null,"0:19:39.440,0:19:46.320\nit, to generate an error on verification. And the\xa0\nlast bit here is just testing establishment only"),(0,o.kt)("p",null,"0:19:50.000,0:19:54.000\nand that's just another flag that you can\xa0\npass in when creating an identifier: 'estOnly:'"),(0,o.kt)("p",null,"0:19:54.720,0:20:00.720\nis 'true' and that means you can only perform\xa0\nestablishment events which are 'incept' or"),(0,o.kt)("p",null,"0:20:00.720,0:20:07.120\n'rotate' events and that's a security enhancement\xa0\nto an identifier, so that you can't ever expose"),(0,o.kt)("p",null,"0:20:07.120,0:20:13.280\nyour public key repeatedly by doing interactions\xa0\nwhich just sign and anchor data but they never"),(0,o.kt)("p",null,"0:20:13.280,0:20:18.400\nrotate keys. And repeated use of a public key\xa0\nweakens it because it exposes it and allows"),(0,o.kt)("p",null,'0:20:18.400,0:20:24.640\npeople an opportunity to try and work against it\xa0\nand break it. So, with "establishment only" (estOnly tag, ed.),'),(0,o.kt)("p",null,"0:20:24.640,0:20:30.240\nevery time you do anything, issue a credential, approve\xa0\na delegation, etc, you're getting a new set of"),(0,o.kt)("p",null,"0:20:30.240,0:20:34.720\n\"next\", you're getting a new set of keys so the keys\xa0\nare only exposed once, when they're first created."),(0,o.kt)("p",null,"0:20:37.280,0:20:37.780\nokay"),(0,o.kt)("p",null,"0:20:40.160,0:20:45.040\nAll right, so let's go run that, how are we doing\xa0\nhere for visibility? Let me zoom in a little bit."),(0,o.kt)("p",null,"0:20:45.040,0:20:49.840\nSteven: a little bit bigger will be good. Phil: How's that? Okay\xa0\nyeah, all right, let me give us a little space"),(0,o.kt)("p",null,"0:20:55.440,0:21:03.840\nAll right, so the first thing we'll do is, so,\xa0\nthe very first thing we always do is delete our"),(0,o.kt)("p",null,"0:21:03.840,0:21:10.560\nkeystore, because I'm developing KERIpy and\xa0\nworking with it every day, I repeatedly am"),(0,o.kt)("p",null,"0:21:10.560,0:21:15.840\ndeleting my keystore, so if you're going to ever do\xa0\nanything with KERI you get used to running this"),(0,o.kt)("p",null,"0:21:15.840,0:21:20.000\ncommand, because you're creating new key stores for\xa0\ntesting, and you don't want to keep the old data"),(0,o.kt)("p",null,"0:21:20.000,0:21:25.600\naround, so you'll just see me do that repeatedly\xa0\nthroughout the demo today."),(0,o.kt)("p",null,"0:21:27.680,0:21:31.600\nSo run './scripts/demo/demo-script.sh'\nSteven: this is a stupid question..."),(0,o.kt)("p",null,"0:21:33.840,0:21:40.720\nso when it's the key stores that are stored in that\xa0\nfolder '/var/keri'; what format is it in?"),(0,o.kt)("p",null,"0:21:42.000,0:21:50.560\nthose are lmdb databases. Lmdb? Lmdb, yeah.\xa0\nit's a read-only, or not read only, it's a"),(0,o.kt)("p",null,"0:21:50.560,0:21:54.480\nlightning fast key value store supposedly\xa0\nthe fastest database on the planet"),(0,o.kt)("p",null,"0:21:55.120,0:21:57.840\naccording to Sam (Smith, ed.) according to them\xa0\nas well; that's what they claim."),(0,o.kt)("p",null,"0:22:00.400,0:22:04.720\nAll right, so we'll just quickly go\xa0\nthrough the different commands that I"),(0,o.kt)("p",null,"0:22:04.720,0:22:08.560\nalready talked through in the script. We created\xa0\nthe key store in the database, and we created a"),(0,o.kt)("p",null,"0:22:08.560,0:22:13.440\ncredential store as well, and you can see I\xa0\nhave write access to '/user/local/var/keri'"),(0,o.kt)("p",null,"0:22:13.440,0:22:19.280\nSo under keystore (ks, ed.) created test under database\xa0\n(db, ed.) test and 'reg' for the registry for the key"),(0,o.kt)("p",null,"0:22:19.280,0:22:24.720\ncredential store, it created test. This is the\xa0\nnon-transferable identifier that we created. It has"),(0,o.kt)("p",null,"0:22:24.720,0:22:29.760\na derivation code of 'B' at the beginning of it and\xa0\ninterestingly enough the public key is also"),(0,o.kt)("p",null,"0:22:30.880,0:22:37.120\nthe identifier. Here's the error that we generated\xa0\nbecause we attempted to rotate a non-transferable"),(0,o.kt)("p",null,"0:22:37.120,0:22:42.000\nidentifier. That's a good error and then\xa0\nnext we created the transferable identifier"),(0,o.kt)("p",null,"0:22:43.440,0:22:47.280\nand it starts with 'E' so you know that's a\xa0\ntransferable identifier just by looking at"),(0,o.kt)("p",null,"0:22:47.280,0:22:52.320\nit. And the public key is different because this\xa0\npublic key, I'm sorry, this identifier (!) is generated"),(0,o.kt)("p",null,"0:22:53.520,0:22:59.680\nas a hash of the inception event, so that's how\xa0\nwe generate identifiers for the"),(0,o.kt)("p",null,"0:22:59.680,0:23:06.560\ntransferable identifiers and then using the same\xa0\none, we did the first rotation, we did a second"),(0,o.kt)("p",null,"0:23:06.560,0:23:10.720\nrotation, we anchored data in here somewhere, which\xa0\nI'll take a look at with the status command next."),(0,o.kt)("p",null,"0:23:11.680,0:23:15.120\nAnd then we started doing that we did:\xa0\nan interaction event. And then we did the"),(0,o.kt)("p",null,"0:23:15.680,0:23:23.120\nrotation, to get three sets of keys. Okay, that was\xa0\nthe second rotation event with the three on it."),(0,o.kt)("p",null,"0:23:23.760,0:23:28.720\nAnd then here are the three signatures on\xa0\nthat anchor data, and those are the same"),(0,o.kt)("p",null,"0:23:28.720,0:23:32.320\nthat are in the script because I when setting\xa0\nup the script, I copy and paste them in there"),(0,o.kt)("p",null,"0:23:32.320,0:23:36.880\none two and three is valid but signature\xa0\nthree is not valid now. Interestingly enough,"),(0,o.kt)("p",null,"0:23:37.520,0:23:42.000\nyou see that with only passing in the signature\xa0\nthe code knew that they were one two and three"),(0,o.kt)("p",null,"0:23:42.640,0:23:46.480\nand that's because when using a multi-sig\xa0\nidentifier when you sign something with it"),(0,o.kt)("p",null,"0:23:46.480,0:23:51.280\nyou create what's called indexed signatures\xa0\nso the derivation code contains not only"),(0,o.kt)("p",null,"0:23:52.640,0:23:59.040\na code to tell you that it is a signature but also\xa0\nit is an index signature so that you can see 'AA',"),(0,o.kt)("p",null,"0:23:59.040,0:24:07.040\n'AB' and 'AC', that's hex for '0', '1' and '2'. So we know that\xa0\nthey came from, they correspond to the first public"),(0,o.kt)("p",null,"0:24:07.040,0:24:11.920\nkey versus the second public key versus the third\xa0\npublic key. Steven: Cool, so how come it says signature"),(0,o.kt)("p",null,"0:24:11.920,0:24:17.680\nthree is valid and then error signature is invalid?\xa0\nPhil: Because this is the one in the shell script that I"),(0,o.kt)("p",null,'0:24:17.680,0:24:25.440\nlet\'s see script "demo-script", I ran this one with\na messed up signature, so I took signature three'),(0,o.kt)("p",null,"0:24:25.440,0:24:31.840\nand I changed the end of it, so it's an example,\njust to show it that way."),(0,o.kt)("p",null,"0:24:32.480,0:24:37.600\ni should change the anchored data, because changing\xa0\nsignatures is not as interesting. But anyway,"),(0,o.kt)("p",null,"0:24:37.600,0:24:41.360\none of the commands that I talked about at\xa0\nthe beginning that's very useful is the 'kli"),(0,o.kt)("p",null,"0:24:42.400,0:24:53.680\nstatus' command and we'll take a look at the test\xa0\nkey store and the alias of trans and you can see"),(0,o.kt)("p",null,"0:24:53.680,0:24:57.680\nthat it's at sequence number five, because we\xa0\nperformed an interaction"),(0,o.kt)("p",null,"0:24:57.680,0:25:01.600\nin several rotation events. We're not using any\xa0\nwitnesses so this is blank, and these are our"),(0,o.kt)("p",null,"0:25:01.600,0:25:05.840\nthree public keys but more interesting with\xa0\nthe 'status' command is this the '--verbose' flag"),(0,o.kt)("p",null,"0:25:07.040,0:25:10.320\nwhich gives you the full key event log\xa0\nso now you're getting into the real guts"),(0,o.kt)("p",null,"0:25:10.320,0:25:14.000\nof kerry here you can see exactly,\xa0\noops, that's not what I want to do,"),(0,o.kt)("p",null,"0:25:19.040,0:25:19.760\nyou can see"),(0,o.kt)("p",null,"0:25:21.840,0:25:25.360\nwell first we specifically list the\xa0\nwitnesses when you run 'verbose', which he"),(0,o.kt)("p",null,"0:25:25.360,0:25:28.480\ndoesn't have any, but now you can see each of\xa0\nthe commands. So here's your inception command,"),(0,o.kt)("p",null,"0:25:29.040,0:25:33.600\nbecause we use self-addressing identifiers (SAID, ed.) for\xa0\nall KERI events, his digest is the same as his"),(0,o.kt)("p",null,"0:25:33.600,0:25:38.160\ninception, is the same as his identifier because\xa0\nthis is an inception event, and here's his key"),(0,o.kt)("p",null,"0:25:38.160,0:25:41.840\nand here's a cryptographic commitment\xa0\nto his next key, his pre-rotating key."),(0,o.kt)("p",null,"0:25:42.640,0:25:47.280\nNow we perform a rotation so you could you\xa0\ncould run Blake3 against this and prove that"),(0,o.kt)("p",null,"0:25:47.280,0:25:51.440\nit matched up with the pre-rotated next key,\xa0\nto verify that this is the correct rotation"),(0,o.kt)("p",null,"0:25:51.440,0:25:56.800\nevent and his identifier of course doesn't\xa0\nchange. That's the whole power of KERI for"),(0,o.kt)("p",null,"0:25:56.800,0:26:01.760\nkey management. But he has a new self-addressing\xa0\nidentifier, because this is the hash of this event."),(0,o.kt)("p",null,"0:26:03.680,0:26:08.400\nThen we move on and this is where we anchor\xa0\nthe data, and this is what an anchor looks like."),(0,o.kt)("p",null,"0:26:08.400,0:26:13.920\nSo it's simply in the 'a:' field in a which is an\xa0\narray of any data that you want to anchor in here."),(0,o.kt)("p",null,"0:26:13.920,0:26:19.040\nAnd this is that anchor file that I showed\xa0\nyou earlier. Here's an interaction event. You see"),(0,o.kt)("p",null,"0:26:19.040,0:26:22.960\nthere's nothing specifying any key changes here,\xa0\nbecause you don't change keys with interaction"),(0,o.kt)("p",null,"0:26:22.960,0:26:27.200\nevents, you're just at anchoring data and\xa0\nhere we've anchored the same amount of data."),(0,o.kt)("p",null,"0:26:28.480,0:26:33.120\nYou notice also every event\xa0but the inception event has a 'p:'"),(0,o.kt)("p",null,"0:26:33.120,0:26:39.680\nand that's an anchor to the previous; thus making\xa0\nit a blockchain. An anchor to the previous event"),(0,o.kt)("p",null,"0:26:41.600,0:26:44.960\nand then finally we performed the rotation,"),(0,o.kt)("p",null,"0:26:46.080,0:26:50.640\nto give us three next keys, but as I said, because\xa0\nwe had already committed to one key when we did"),(0,o.kt)("p",null,"0:26:50.640,0:26:54.800\nthat three, we got three next keys but only\xa0\none public key, so we had to perform a second"),(0,o.kt)("p",null,"0:26:54.800,0:27:01.360\nrotation to get three public keys, and this 'kt:'\xa0\nhere is the signing threshold for the (signing, ed.), so you"),(0,o.kt)("p",null,"0:27:01.360,0:27:05.840\nneed at least two signatures to make anything\xa0\nvalid for this identifier in this current state."),(0,o.kt)("p",null,"0:27:08.000,0:27:11.840\nAll right. So that's the first intro\xa0\nscript. Any questions about that?"),(0,o.kt)("p",null,"0:27:13.040,0:27:14.480\nSteven: I don't know enough to ask questions."),(0,o.kt)("p",null,"0:27:18.560,0:27:24.400\nSo I know from reading some of the specs of\xa0\nthat all the those (tags, ed.) like 'vt:' whatever the"),(0,o.kt)("p",null,"0:27:24.400,0:27:29.760\nfield names are, are all defined in the spec, right?\nPhil: yes, they are, absolutely. Yeah, it's funny,"),(0,o.kt)("p",null,"0:27:29.760,0:27:35.120\nI mean, I'm at the point now, where I look at them\nand my head just reads them out loud to me. Steven: I'm not"),(0,o.kt)("p",null,"0:27:35.120,0:27:44.640\nthere yet. Phil: yeah, it takes a while and Sam has changed\xa0\nthem repeatedly. Like 'k' here used or i"),(0,o.kt)("p",null,"0:27:44.640,0:27:48.240\nknow b all the b's they used to be 'w's because\xa0\nthey used to be witnesses but we changed them"),(0,o.kt)("p",null,"0:27:48.240,0:27:54.160\nto backers instead of witnesses so now they're\xa0\nall 'bt', 'br' and 'ba' Steven: But is a backer a witness?"),(0,o.kt)("p",null,"0:27:55.840,0:27:59.760\nPhil: Well, you can have either a ledger backer or a\xa0\nwitness backer that's why we changed the name."),(0,o.kt)("p",null,"0:28:01.360,0:28:05.680\nand a witness backer would be using standard\xa0\nKERI infrastructure for witnesses"),(0,o.kt)("p",null,"0:28:05.680,0:28:09.360\nand then you can have as many as you want, but if\xa0\nyou have a ledger backer you're anchored to just"),(0,o.kt)("p",null,"0:28:09.360,0:28:15.840\none ledger. And that ledger serves the role\xa0\nof both witnesses and technically watchers."),(0,o.kt)("p",null,"0:28:16.400,0:28:20.800\nSteven: a ledger is greater than ...\xa0\na ledger contains witnesses?"),(0,o.kt)("p",null,"0:28:22.320,0:28:28.880\nPhil: a ledger serves the role of a witness, if you have\xa0\na need for distributed ledger technology in your"),(0,o.kt)("p",null,"0:28:28.880,0:28:33.920\ninfrastructure. iIf you're relying on cryptocurrency\xa0\nor you know the economics of a token or whatever,"),(0,o.kt)("p",null,"0:28:34.960,0:28:42.240\nthen you can use that and trust the (if you\xa0\nwant to put trust in the) anchoring of your"),(0,o.kt)("p",null,"0:28:42.240,0:28:47.440\nevents in the ledger, instead of getting\xa0\nreceipts from witnesses, you can do that."),(0,o.kt)("p",null,"0:28:47.440,0:28:52.720\nIt's not better, it's just different. It's just a\xa0\ndifferent way to provide that layer of security."),(0,o.kt)("p",null,"0:28:54.960,0:28:58.160\nSo the next thing I'm going to do here,\xa0\ndown in the lower window, is to launch.."),(0,o.kt)("p",null,"0:28:58.160,0:29:01.280\nSteven: So, it has a story (as a sidebar): Has there\xa0\nbeen discussion about using tokens?"),(0,o.kt)("p",null,"0:29:02.640,0:29:08.000\nSteven: Not for us (KERI/ACDC, ed.), no. Steven: But like crypto?\nPhil: At IIW last week there was a really interesting session"),(0,o.kt)("p",null,"0:29:08.560,0:29:15.680\nthat Richard Esplin from Evernym (now AVAS) held,\nasking why KERI versus why a ledger?"),(0,o.kt)("p",null,"0:29:15.680,0:29:20.560\nAnd what the whole point of it for him was... {<- cliff hanger!},\nthat it was\xa0a great session, he held it on Monday and none of"),(0,o.kt)("p",null,"0:29:20.560,0:29:25.840\nus were able to attend. So then he re-held it again\xa0\non Tuesday, oh I'm sorry it was on Tuesday, first day"),(0,o.kt)("p",null,"0:29:26.400,0:29:32.560\non Tuesday, then he held it again on Wednesday\xa0\nafter talking to us Tuesday night at dinner he"),(0,o.kt)("p",null,"0:29:32.560,0:29:38.320\nheld it again on Wednesday, so Sam and myself\xa0\nand Kevin could participate, pardon me, and his"),(0,o.kt)("p",null,"0:29:38.320,0:29:42.240\nthe whole point of it for him was { tadaa! -> }\nokay, if\xa0I'm instructing clients who want to build"),(0,o.kt)("p",null,'0:29:42.240,0:29:46.400\nSSI infrastructure, do I tell him "he is KERI"\xa0\ndo I tell him "he\'s a ledger" what do I tell him?'),(0,o.kt)("p",null,"0:29:48.160,0:29:51.280\nAnd it was great to clear up a lot of\xa0\nmisconceptions because people think:"),(0,o.kt)("p",null,"0:29:52.000,0:29:56.400\n\"oh, you can't use a ledger with KERI\". No that's not\xa0\ntrue, you don't have to use a ledger with KERI. We"),(0,o.kt)("p",null,"0:29:56.400,0:30:01.200\ndon't think it's, we don't think it's needed at\xa0\nall, but as Sam as what Sam pointed out during"),(0,o.kt)("p",null,"0:30:01.200,0:30:05.920\nthe talk, is if you already have an investment\xa0\nin ledger infrastructure for other reasons,"),(0,o.kt)("p",null,"0:30:06.640,0:30:10.720\nyou can then leverage that ledger\xa0\nas an additional trust threshold,"),(0,o.kt)("p",null,"0:30:10.720,0:30:14.640\nor security threshold for your\xa0\nidentifiers instead of using witnesses."),(0,o.kt)("p",null,"0:30:17.200,0:30:22.800\nSo no, we're not, I mean the vLEI won't be using\xa0\nanything to do, with cryptocurrencies or tokens but"),(0,o.kt)("p",null,"0:30:22.800,0:30:29.280\nif you, you know, if for example a lot of people are\xa0\nusing SSI systems based on Indy networks, right,"),(0,o.kt)("p",null,"0:30:29.280,0:30:34.320\nnow if you want to transition to using KERI, you\xa0\ncould do that by anchoring your KERI identifiers"),(0,o.kt)("p",null,"0:30:34.320,0:30:39.040\nin your Indy ledger. And then you, and the neat\xa0\nthing about it is, you could then transfer them"),(0,o.kt)("p",null,"0:30:39.040,0:30:43.600\noff, off the ledger and have non-ledger based\xa0\nidentifiers, so that's what's great about"),(0,o.kt)("p",null,"0:30:43.600,0:30:47.760\nKERI: it's portable, you can be anchored to any\xa0\none ledger at a time, or you could move it to a"),(0,o.kt)("p",null,"0:30:47.760,0:30:53.040\ndifferent ledger, or you could move to using just\xa0\nwitnesses, all with the same identifier by just"),(0,o.kt)("p",null,"0:30:53.040,0:30:58.880\ndoing rotation events and changing your anchor,\xa0\nyour backers here. Steven: but could you also do, if"),(0,o.kt)("p",null,"0:31:02.080,0:31:09.520\ncould you be anchored, let's say to multiple Indies\nor Ethereum? Phil: you could be only anchored in one at a"),(0,o.kt)("p",null,"0:31:09.520,0:31:16.160\ntime, because that's the source of truth\xa0\nfor that identifier at that given point in time."),(0,o.kt)("p",null,"0:31:16.160,0:31:21.440\nYou can then rotate to a different one, but you\xa0\nyou can't have two ledgers at the same time."),(0,o.kt)("p",null,"0:31:23.200,0:31:30.320\nSteven: So when people, well what maybe they\xa0\nmisunderstood, so I understood that"),(0,o.kt)("p",null,"0:31:30.320,0:31:33.360\nokay one of the problems in blockchain is that\xa0\nyou're all you have to be committed to all use"),(0,o.kt)("p",null,"0:31:33.360,0:31:39.120\nthe same network which is not practical\xa0\nunless you're running an ICO scam, so"),(0,o.kt)("p",null,"0:31:40.960,0:31:46.880\nI understand KERI is digital ledger\ntechnology agnostic. And that you could"),(0,o.kt)("p",null,"0:31:46.880,0:31:52.080\nuse it..., it could interoperate with existing\xa0\nledgers like Aries or Indy whatever it's called,"),(0,o.kt)("p",null,"0:31:54.800,0:31:57.760\nbut it's only that one network.\xa0\nYou couldn't, you couldn't connect"),(0,o.kt)("p",null,"0:31:59.280,0:32:07.520\nEthereum and Indy to the KERI ledger (<- KEL?!)\xa0\nPhil: Correct, yeah, KERI is not (a ledger. ed.), KERI couldn't,"),(0,o.kt)("p",null,"0:32:07.520,0:32:13.520\nIt couldn't be used as a technology to bridge between\xa0\nnetworks, that's not what it's designed for, but"),(0,o.kt)("p",null,"0:32:13.520,0:32:17.200\nyou could use it to move a single\xa0\nidentifier across networks, if you wanted"),(0,o.kt)("p",null,"0:32:19.360,0:32:29.520\noh okay, all right, yep, okay. So moving on,\xa0\nthe next command I'm running again"),(0,o.kt)("p",null,"0:32:29.520,0:32:34.160\nwe do the 'rm -rf' and then 'kli witness\xa0\ndemo'. This starts these three witnesses and"),(0,o.kt)("p",null,"0:32:34.160,0:32:38.320\nwe give them aliases of 'wan', 'wil' and\xa0\n'wes' and these are the three identifiers."),(0,o.kt)("p",null,"0:32:38.320,0:32:41.840\nThat I now know by heart, because I\xa0\nstart them a hundred times every day."),(0,o.kt)("p",null,"0:32:42.800,0:32:48.240\nAnd they're started with a given salt for\xa0\neach one, so that the identifier is predictable."),(0,o.kt)("p",null,'0:32:50.000,0:32:54.640\nNow we get to OOBIs. This is the really interesting\xa0\npart. So OOBIs or "out-of-band introductions"'),(0,o.kt)("p",null,"0:32:54.640,0:33:00.720\nallow people to discover full key event logs,\xa0\nwitness key event logs and service endpoints."),(0,o.kt)("p",null,"0:33:00.720,0:33:06.800\nfor any other identifier, and you can see here\xa0\nthey are simply URLs, so in these cases this is"),(0,o.kt)("p",null,"0:33:06.800,0:33:13.760\nan OOBI, we know that because it has this '","*","*","*","/oobi/'\nin the path. This is the identifier about whom"),(0,o.kt)("p",null,"0:33:13.760,0:33:18.960\nthis OOBI is referencing. And this is the role that\xa0\nthis particular OOBI is playing, so in this case"),(0,o.kt)("p",null,"0:33:18.960,0:33:26.880\nthis is a 'controller' OOBI for this witness.\xa0\nWe'll take a look at two configuration files."),(0,o.kt)("p",null,"0:33:33.200,0:33:38.320\nSo this is a new (setup? ed.), with the most recent\xa0\nversion of KERI with Py, we have the ability"),(0,o.kt)("p",null,"0:33:38.320,0:33:42.160\nto specify configuration files. Previously\xa0\nwhen we did our first pilot for life with"),(0,o.kt)("p",null,"0:33:42.160,0:33:44.640\nthis we were hard-coding IP-addresses\xa0\nall over the place, because we didn't"),(0,o.kt)("p",null,"0:33:44.640,0:33:48.560\nhave a discovery mechanism. But we now have\xa0\na discovery mechanism that's using OOBIs."),(0,o.kt)("p",null,"0:33:49.680,0:33:54.000\nSo when you start any agent who's going to run\xa0\nwith persistent connection like our witnesses,"),(0,o.kt)("p",null,"0:33:54.000,0:34:00.320\nor if you run agents, you can specify a\xa0\nCURLs field in their configuration file,"),(0,o.kt)("p",null,"0:34:00.320,0:34:06.880\nthat specifies endpoints that he will be exposing.\xa0\nSo in this case the scheme he's exposing a TCP"),(0,o.kt)("p",null,"0:34:06.880,0:34:15.600\nend-point. On this port 'localhost' and an 'http:' endpoint\xa0\non this port on localhost when he generates OOBIs"),(0,o.kt)("p",null,"0:34:15.600,0:34:19.440\nhe can generate OOBIs, for either of these\xa0\nendpoints, because he's been told, through this"),(0,o.kt)("p",null,"0:34:19.440,0:34:26.320\nconfiguration file that that's who he's listening\xa0\non. So when he generates an OOBI for example for a"),(0,o.kt)("p",null,'0:34:26.320,0:34:30.720\ncontroller, so then the controller is basically saying:\n"this\xa0is where you can contact me directly, not through'),(0,o.kt)("p",null,'0:34:30.720,0:34:38.480\na witness, but just contact me directly", pardon me,\nhe would generate a newbie that looks like this...'),(0,o.kt)("p",null,"0:34:41.520,0:34:45.280\nOkay, we're already schooled over this, is the\xa0\nlittle window of the two of us was blocking it"),(0,o.kt)("p",null,"0:34:47.600,0:34:52.560\nso it's again, it's the location to\xa0\ncontact this OOBI which is of course the same"),(0,o.kt)("p",null,"0:34:52.560,0:34:57.760\nas his 'http:' endpoint: what they identify, who the\xa0\nidentifier is, and what role this OOBI is playing."),(0,o.kt)("p",null,"0:34:57.760,0:35:02.480\nNow interestingly, when you look at the\xa0\ncommand line we ran six OOBI resolutions, the"),(0,o.kt)("p",null,"0:35:02.480,0:35:07.440\nlittle green checkboxes, said they all worked\xa0\nand that's because, well now when we start this"),(0,o.kt)("p",null,"0:35:08.000,0:35:12.560\nbased on the configuration file, not only does\xa0\neach witness expose his endpoints this way,"),(0,o.kt)("p",null,"0:35:12.560,0:35:19.360\nbut he also resolves the other two witnesses\xa0\nOOBIs, so at startup he exposes this then he"),(0,o.kt)("p",null,"0:35:19.360,0:35:27.280\nreaches out to this witness at this\xa0\naddress and this witness returns a reply event"),(0,o.kt)("p",null,"0:35:27.840,0:35:32.320\nwhich contains his key event log, which is very\xa0\nsimple, because he's a non-transferable"),(0,o.kt)("p",null,"0:35:32.320,0:35:38.080\nidentifier, and a reply message containing\xa0\nhis endpoint information that he has had"),(0,o.kt)("p",null,"0:35:38.080,0:35:41.920\nconfigured via this configuration file. So now\xa0\nall the witnesses are communicating with each"),(0,o.kt)("p",null,"0:35:41.920,0:35:45.360\nother and establishing how they could connect\xa0\nwith each other if they need to. And also if"),(0,o.kt)("p",null,"0:35:45.360,0:35:50.160\nsomeone is, let's say, as we will demo in a minute,\xa0\nsomeone is using all three of these witnesses,"),(0,o.kt)("p",null,"0:35:52.080,0:35:56.720\nwhen someone asks a witness for an OOBI\xa0\nfor an identifier, that he's a witness for,"),(0,o.kt)("p",null,"0:35:56.720,0:36:01.520\nhe can say \"oh well, he's also has\xa0\nthese other two witnesses and here's"),(0,o.kt)("p",null,"0:36:01.520,0:36:05.200\ntheir connection information. Doesn't have to do\xa0\nthat, but he can, because we've configured him to"),(0,o.kt)("p",null,"0:36:05.200,0:36:11.120\nresolve the other witnesses and then wil's\xa0\nand wes's configuration file is the same."),(0,o.kt)("p",null,"0:36:11.120,0:36:17.280\nExcept of course he's referencing the other two\xa0\nidentifiers, right, so now we'll look at 'demo-script-witness'"),(0,o.kt)("p",null,"0:36:20.800,0:36:28.320\nagain, this is we initially initialized\xa0\nthe key store with, no passcode, we do an OOBI"),(0,o.kt)("p",null,"0:36:28.320,0:36:32.720\nresolution against each of the three witnesses,\xa0\nthose OOBIs should look familiar because the ones"),(0,o.kt)("p",null,"0:36:32.720,0:36:38.240\nI just showed in the configuration file, so now\xa0\nthis new data store now has the information for"),(0,o.kt)("p",null,"0:36:38.240,0:36:42.960\neach of these three witnesses. So he's configured\xa0\nto be able to use them as witnesses, if he wants"),(0,o.kt)("p",null,"0:36:43.840,0:36:49.680\nthis, however, if we were running an agent we would\xa0\nprobably create a configuration file like this one."),(0,o.kt)("p",null,"0:36:50.960,0:36:54.960\nIf for example we were, which\xa0\nwe will be for the vLEI system,"),(0,o.kt)("p",null,"0:36:54.960,0:36:59.600\npackaging up an agent that has pre-configured\xa0\nwitnesses; that we're anticipating everyone will"),(0,o.kt)("p",null,"0:36:59.600,0:37:03.600\nuse and then we create a configuration file\xa0\nwhich gives them OOBIs to those witnesses."),(0,o.kt)("p",null,"0:37:03.600,0:37:06.960\nSo when they start up, they initially\xa0\nautomatically initialize those,"),(0,o.kt)("p",null,"0:37:06.960,0:37:10.720\nand bring them, bring all the data over they need,\xa0\nso they can communicate with those witnesses."),(0,o.kt)("p",null,"0:37:12.800,0:37:17.120\nBut you can do it with command line here 'kli\xa0\noobi resolve' so that's what we do for this."),(0,o.kt)("p",null,"0:37:19.280,0:37:26.160\nSo then we do an inception event with the\xa0\n'trans-wits-sample' and then we create an inquisitor"),(0,o.kt)("p",null,"0:37:26.160,0:37:31.840\nand then we do a status of this with his\xa0\nwitnesses, we perform a rotation witness"),(0,o.kt)("p",null,"0:37:31.840,0:37:35.520\ncut, so that removes this guy from his set\xa0\nof witnesses, this is rotating a witness"),(0,o.kt)("p",null,"0:37:35.520,0:37:39.360\nout, because I don't want to use them\xa0\nanymore and then we do a status again"),(0,o.kt)("p",null,"0:37:39.360,0:37:43.840\nto see that he's gone, that he's down to\xa0\ntwo witnesses this is fixed, I fixed this,"),(0,o.kt)("p",null,"0:37:46.080,0:37:51.600\nand then we do a kli rotate with a 'witness-add',\nso we add that witness back in and then we do"),(0,o.kt)("p",null,"0:37:51.600,0:37:56.240\nanother status to see that he has those, that\xa0\nwitness's back in, as part of his witness set."),(0,o.kt)("p",null,"0:37:56.240,0:37:59.760\nSteven: And what happens if you never added that\xa0\nback in? Does something tell you have,"),(0,o.kt)("p",null,"0:38:00.560,0:38:03.040\nyou should have three witnesses? Phil: Well you're okay,"),(0,o.kt)("p",null,"0:38:04.640,0:38:08.320\nyou don't have to. It's just saying that\xa0\nyou now have two and when you, so when you"),(0,o.kt)("p",null,"0:38:08.320,0:38:18.080\nrotate this out, it will also change your witness\xa0\nthreshold. I think let's take a look at this guy"),(0,o.kt)("p",null,"0:38:18.080,0:38:22.400\nyeah so you can see when we create him he's\xa0\ncreated his transferable with these three"),(0,o.kt)("p",null,"0:38:22.400,0:38:26.880\nwitnesses and he has a witness threshold of two\xa0\nso that means you only need receipts from any"),(0,o.kt)("p",null,"0:38:26.880,0:38:31.280\ntwo of these okay considering Steven: Okay, that's sort\xa0\nof, that's what I was thinking / wondering about."),(0,o.kt)("p",null,"0:38:31.280,0:38:36.720\nSo if you put that to three\xa0\nand you and you removed, you cut that one...,"),(0,o.kt)("p",null,"0:38:37.440,0:38:42.480\nPhil: you'd get an error. Steven: Oh, you get an error, yeah,\xa0\nyou can't cut them? Phil: you"),(0,o.kt)("p",null,"0:38:42.480,0:38:46.480\ncan't, yeah, I would say your witness threshold of\xa0\ntwo is you're with a threshold of three can't be"),(0,o.kt)("p",null,"0:38:46.480,0:38:50.720\nsatisfied, because you only have two witnesses. Steven: so\xa0\nyou're supposed to create a new one, add a new one"),(0,o.kt)("p",null,"0:38:50.720,0:38:54.320\nand then... Phil: No, you can change the threshold\xa0\non the command line, so you do something like"),(0,o.kt)("p",null,"0:38:55.440,0:38:59.840\n'--toad 2' and then that would,\xa0\nthat would make it valid"),(0,o.kt)("p",null,"0:39:01.680,0:39:04.240\nSteven: but wasn't there a reason why\xa0\nit was three in the first place?"),(0,o.kt)("p",null,"0:39:05.760,0:39:09.440\nPhil: It's all your own identifier and\xa0\nyou're controlling your identifier, so it's up to"),(0,o.kt)("p",null,"0:39:09.440,0:39:14.560\nyou to determine what security constraints\xa0\nyou want for that identifier, so yeah sure, you"),(0,o.kt)("p",null,"0:39:14.560,0:39:17.920\nprobably created it with three, but if you're just\xa0\nsaying \"okay, you know what, now I only need two, or"),(0,o.kt)("p",null,"0:39:17.920,0:39:21.760\nI'm only going to have two temporarily, because\xa0\ni need to go find a new witness\", you can do this."),(0,o.kt)("p",null,"0:39:21.760,0:39:27.200\nAgain not the most practical example but\xa0\nI'm just showing how 'cut's and 'add's work, makes sense?"),(0,o.kt)("p",null,"0:39:27.200,0:39:40.340\nSteven: yeah. Phil: All right, cool, so let's run this\xa0\nscript and we can watch it go through its process."),(0,o.kt)("p",null,"0:39:40.840,0:39:44.720\n{Quick question: Does Phil enjoy being around Wan, Wil and Wes??}"),(0,o.kt)("p",null,"0:39:44.720,0:39:45.220\nyes"),(0,o.kt)("p",null,"0:39:48.720,0:39:51.840\nAll right, creating key store, this\xa0\nis the OOBI resolution so that this"),(0,o.kt)("p",null,"0:39:51.840,0:39:55.280\nguy now knows how to contact\xa0\nthose OOBIs. And you can see"),(0,o.kt)("p",null,"0:39:55.280,0:39:58.640\nhe's going through all the different steps.\xa0\nAnd we'll go step by step through this."),(0,o.kt)("p",null,"0:40:02.640,0:40:09.520\nPage up, so this is where he initialized his,\xa0\nor he resolved his three OOBIs with the 'oobi resolve'"),(0,o.kt)("p",null,"0:40:09.520,0:40:15.600\ncommand and you can see part of the 'incept' command\xa0\nalso takes your identifier and propagates it to"),(0,o.kt)("p",null,"0:40:15.600,0:40:20.560\nyour three witnesses. However, many end number of\xa0\nwitnesses waits for receipts from those witnesses,"),(0,o.kt)("p",null,"0:40:20.560,0:40:25.200\nthen collects all the receipts and passes them out\xa0\nto all the other witnesses. So he propagates the"),(0,o.kt)("p",null,"0:40:25.200,0:40:30.960\nreceipts from everybody to every witness. So every\xa0\nwitness has a fully receded key event log for him"),(0,o.kt)("p",null,"0:40:30.960,0:40:34.800\nand that's what waiting for witness receipts\xa0\nis here. And that all happens as part of the"),(0,o.kt)("p",null,"0:40:34.800,0:40:40.320\n'incept' command, then we did the 'status' command\xa0\nso this is 'EELF","_","' as our new identifier"),(0,o.kt)("p",null,"0:40:40.960,0:40:45.280\nand you can see that he has a signing\xa0\nthreshold of two but he got all three receipts"),(0,o.kt)("p",null,"0:40:50.480,0:40:54.480\nand then as we go on, you can see this is\xa0\nwhere he cut that one witness, so he's now"),(0,o.kt)("p",null,"0:40:54.480,0:41:00.880\ndown to two, and this is where he added him back\xa0\nin, he's now back up to three, so we'll do a quick"),(0,o.kt)("p",null,"0:41:04.640,0:41:05.840\ntest"),(0,o.kt)("p",null,"0:41:16.240,0:41:19.840\nmy fingers know I made a mistake my brain didn't"),(0,o.kt)("p",null,"0:41:22.080,0:41:22.580\nyes"),(0,o.kt)("p",null,"0:41:32.240,0:41:33.040\nwhat did I type"),(0,o.kt)("p",null,"0:41:38.960,0:41:41.520\nwitness test trans wits"),(0,o.kt)("p",null,"0:41:43.600,0:41:49.600\nOkay, so here's the key event log for all those\xa0\nthings that we just did. This is the inception"),(0,o.kt)("p",null,"0:41:49.600,0:41:53.360\nevent, and in an inception event you just\xa0\nspecify the 'b:' field with the backers you're"),(0,o.kt)("p",null,"0:41:53.360,0:41:58.480\ngoing to use for this and the 'bt' is your backer\xa0\nthreshold so that's the 'toad:' of two that we saw."),(0,o.kt)("p",null,"0:42:00.480,0:42:07.520\nHere's the rotation event that \"did a 'br'\" or backer remove,\nso this cut that witness from the list"),(0,o.kt)("p",null,"0:42:08.320,0:42:11.680\nand then this is the third\xa0\nrotation, of a second rotation event"),(0,o.kt)("p",null,"0:42:12.240,0:42:17.040\nthat \"did a 'ba'\", so it added\xa0\nthat backer back into the list"),(0,o.kt)("p",null,"0:42:17.040,0:42:22.000\nand when we did the '--verbose', you can see that he\xa0\nlists, he's now back up to, those three witnesses"),(0,o.kt)("p",null,"0:42:24.560,0:42:29.120\nAll right, so that's using witnesses with an\xa0\nidentifier, again I don't think that I show"),(0,o.kt)("p",null,"0:42:29.120,0:42:35.360\nthat yeah I showed this yeah yeah so you just\xa0\nspecify your witnesses in the 'wits' configuration,"),(0,o.kt)("p",null,"0:42:35.360,0:42:38.320\nin the 'wits' field of the configuration\xa0\nfile, when creating an identifier"),(0,o.kt)("p",null,"0:42:38.880,0:42:46.000\nand that's in the demo script, when we did the\xa0\n'incept', we specified that file 'trans-wits' sample,"),(0,o.kt)("p",null,"0:42:48.400,0:42:51.120\nand I used to do a query in this. That's\xa0\nwhy we're creating this guy \"inquisitor\""),(0,o.kt)("p",null,"0:42:51.120,0:42:57.840\nhere, but we don't do anything with it,\xa0\nbut we can take a look at the 'kli list'"),(0,o.kt)("p",null,"0:42:59.040,0:43:03.280\nand you can see I have two aliases inquisitor\xa0\nand trans-wits, so I have two identifiers in"),(0,o.kt)("p",null,"0:43:03.280,0:43:08.640\nthis one key store. And that's who they are\xa0\nand then from there, I could do a 'status' to"),(0,o.kt)("p",null,"0:43:08.640,0:43:14.640\nsee what each one looks like. All right we\xa0\ngot 15 minutes left. We're probably only"),(0,o.kt)("p",null,"0:43:14.640,0:43:17.440\ngoing to get through delegation because,\xa0\nI want to show you the agent real quickly."),(0,o.kt)("p",null,"0:43:21.120,0:43:27.200\nOkay, so we'll go over here, we'll start closing\xa0\nsome windows, all right, so let's go over delegation"),(0,o.kt)("p",null,"0:43:31.440,0:43:35.120\nSo with delegation we're going to\xa0\ncreate two identifiers. One is the"),(0,o.kt)("p",null,"0:43:35.120,0:43:40.960\ndelegate, and the other is the delegator.\xa0\nSo we create both key stores then we run"),(0,o.kt)("p",null,"0:43:40.960,0:43:45.200\nan 'incept' command for. The delegator, using\nthis configuration file,"),(0,o.kt)("p",null,"0:43:50.160,0:43:52.560\nhe should look familiar, this is just like"),(0,o.kt)("p",null,"0:43:52.560,0:43:55.280\nthe transferable guy we just\xa0\ncreated; all the same features."),(0,o.kt)("p",null,"0:43:59.440,0:44:03.600\nOh yes, here's where we're specifying a salt for"),(0,o.kt)("p",null,"0:44:03.600,0:44:07.840\neach of these. So that we know what their\xa0\nidentifier will be when we generate them."),(0,o.kt)("p",null,"0:44:09.360,0:44:14.000\nAnd then we do an 'incept' command for him, I just\xa0\nsaid that, and then the delegate keystore is"),(0,o.kt)("p",null,"0:44:14.000,0:44:20.800\nresolving the OOBI for the delegator. Now this\xa0\nOOBI is different. This OOBI is a witness OOBI."),(0,o.kt)("p",null,"0:44:20.800,0:44:25.760\nSo because, as you saw in the configuration file,\xa0\nI'm using these three witnesses, he can generate"),(0,o.kt)("p",null,"0:44:25.760,0:44:32.000\nan OOBI which tells anyone interested how to\xa0\ncontact him through his witness. So it starts"),(0,o.kt)("p",null,"0:44:32.000,0:44:38.400\nwith OOBI, just like the other, it starts with the\xa0\nAID or the identifier for whom this OOBI is about,"),(0,o.kt)("p",null,'0:44:38.400,0:44:43.200\nand then the role. In this case it\'s "witness" and\xa0\nthen it specifies the identifier of the witness.'),(0,o.kt)("p",null,"0:44:45.440,0:44:45.940\nAll right"),(0,o.kt)("p",null,"0:44:48.480,0:44:49.840\nso let's get started..."),(0,o.kt)("p",null,"0:44:52.960,0:44:55.680\nYeah, so I guess I just I have to run this"),(0,o.kt)("p",null,"0:44:58.800,0:45:02.160\nkill and restart, because we want to clean\xa0\ndata store. Actually, I don't technically"),(0,o.kt)("p",null,"0:45:02.160,0:45:06.320\nfor this one, I don't have to, but i'd like to do.\xa0\n(then we hear my grandson crying in the background)"),(0,o.kt)("p",null,"0:45:11.040,0:45:15.680\nall right oh sorry one thing I forgot to\xa0\npoint out is, this command here when you inset"),(0,o.kt)("p",null,"0:45:15.680,0:45:19.040\nlet's let's open him so we'll\xa0\nlook at delegate.delegatee.json"),(0,o.kt)("p",null,"0:45:21.360,0:45:26.320\nso the only difference with him from all of\xa0\nthe others that we've done before is that he"),(0,o.kt)("p",null,"0:45:26.320,0:45:32.800\nspecifies a 'delpre:' so he's saying any key event\xa0\nthat I do, any key management event that I do"),(0,o.kt)("p",null,"0:45:32.800,0:45:39.440\nan 'inception' or 'rotation' needs to be approved via\xa0\nan anchor by this identifier and the anchors are"),(0,o.kt)("p",null,"0:45:39.440,0:45:43.760\nwhat we saw earlier. You do a rotation event or an\xa0\ninteraction event, and you put that data in there."),(0,o.kt)("p",null,"0:45:43.760,0:45:47.280\nAnd by signing that key event and anchoring\xa0\nit to your key event log (KEL, ed.), You're making a"),(0,o.kt)("p",null,"0:45:47.280,0:45:51.360\ncryptographic commitment approving\xa0\nthis whatever event he's requesting."),(0,o.kt)("p",null,"0:45:53.280,0:45:57.920\nAnd we'll take a look at that data, as soon as\xa0\nthis is done, so he's only using one witness just"),(0,o.kt)("p",null,"0:45:57.920,0:46:05.040\nbecause I'm lazy, so he will then wait because\xa0\nhe has a delegator he'll wait to finish"),(0,o.kt)("p",null,"0:46:05.920,0:46:11.280\nuntil a delegator approves him this command\xa0\nis actually reentrant so if you control see it"),(0,o.kt)("p",null,"0:46:12.240,0:46:16.240\ngo away call your guy say hey I just sent you a\xa0\ndelegation event can you approve it he approves"),(0,o.kt)("p",null,"0:46:16.240,0:46:20.240\nit you can come back and rerun it and it'll finish\xa0\nthe event propagate the receipts of the witnesses"),(0,o.kt)("p",null,"0:46:20.240,0:46:25.360\net cetera but in the meantime we'll just leave him\xa0\nrunning and we'll go to another window and then"),(0,o.kt)("p",null,"0:46:25.360,0:46:32.400\nSteven: How does it delegate, how does the .., how does\nthat\xa0person know, that they're waiting on it?"),(0,o.kt)("p",null,'0:46:33.840,0:46:38.080\nThis aside from you saying\n"get on there and approve it", is'),(0,o.kt)("p",null,"0:46:38.080,0:46:43.920\nthere some messaging? Phil: yes so this 'incept'\ncommand will actually notice that he has"),(0,o.kt)("p",null,"0:46:43.920,0:46:51.120\na delegator listed in here, and he will\xa0\nsend his key event for his inception event"),(0,o.kt)("p",null,"0:46:51.120,0:46:55.840\nto the OOBI, that he was up to the endpoint\xa0\nthat he found from OOBI resolution here."),(0,o.kt)("p",null,"0:46:56.800,0:47:02.400\nAnd the delegator or any identifier, when\xa0\nthey receive a key event and they process it"),(0,o.kt)("p",null,"0:47:03.360,0:47:06.640\nand they're listed as the delegator,\nit's a trigger that they have"),(0,o.kt)("p",null,"0:47:07.200,0:47:11.680\nsomething to do and that's what this delegate\nconfirmed command is he wakes up checks his"),(0,o.kt)("p",null,"0:47:11.680,0:47:18.000\nmailbox and in his mailbox he finds this event\xa0\nnotices that he's listed as the delegator."),(0,o.kt)("p",null,"0:47:18.560,0:47:24.080\nAnd so then he will ask, you'll see on the\xa0\ncommand line, he'll ask \"Hey so-and-so wants"),(0,o.kt)("p",null,'0:47:24.080,0:47:26.880\nyou to be their delegate, and\xa0\nyou can either approve it or deny it".'),(0,o.kt)("p",null,'0:47:29.200,0:47:35.200\nI guess "reject" is the better word, so\xa0\ndid I do this yet, I\'m pretty sure again'),(0,o.kt)("p",null,"0:47:36.720,0:47:39.520\nAll right so we're going to run\xa0\nthis, he's resolving the OOBIs"),(0,o.kt)("p",null,"0:47:41.600,0:47:46.560\nfor the witnesses, and you can see that he\xa0\nresolved the delegator's OOBI right here."),(0,o.kt)("p",null,"0:47:46.560,0:47:50.000\nAnd then he says waiting for delegation\xa0\napproval so he's just sitting here,"),(0,o.kt)("p",null,"0:47:50.000,0:47:56.880\nwaiting scanning for someone , for this person, to\xa0\napprove his event, so I'll just copy and paste this."),(0,o.kt)("p",null,"0:47:59.840,0:48:05.840\nSo he wakes up, he discovers the inception\xa0\nevent, so he says a delegation inception request,"),(0,o.kt)("p",null,'0:48:07.360,0:48:13.200\na delegation inception request from this\xa0\nidentifier, "accept or deny, I will accept it". He'),(0,o.kt)("p",null,"0:48:13.200,0:48:19.680\nsigns the event, he propagates his own event to his\xa0\nwitnesses and then sends the fully receded event"),(0,o.kt)("p",null,'0:48:19.680,0:48:25.600\nback to the delegator, but to the delegate\xa0\nwho then says "Okay, I am now an approved event'),(0,o.kt)("p",null,"0:48:25.600,0:48:28.800\nand I'm going to get my witness\xa0\nreceipts, and here is my new identifier\""),(0,o.kt)("p",null,"0:48:30.320,0:48:34.880\nWe'll look at two different\xa0\nstatus, so we'll do 'kli status'"),(0,o.kt)("p",null,"0:48:38.080,0:48:39.040\nI think it's delegate"),(0,o.kt)("p",null,"0:48:41.760,0:48:46.320\nIt is. So you can see because he's a delegated\xa0\nidentifier. The status command now prints out"),(0,o.kt)("p",null,"0:48:46.320,0:48:51.040\nthis bit of information: here's my delegator\xa0\nand the fact that he's anchored, and this is"),(0,o.kt)("p",null,"0:48:51.040,0:48:55.360\nimportant, because if I were to control scene\xa0\nand \"do a 'status'\" I could come back in three"),(0,o.kt)("p",null,"0:48:55.360,0:48:58.720\ndays later and do a status it doesn't say\xa0\n\"shoot, he hasn't been anchored yet\". I need to"),(0,o.kt)("p",null,"0:48:58.720,0:49:02.400\nget on the phone and bug him or whatever or run\xa0\nthe incept command again and see if the anchor"),(0,o.kt)("p",null,"0:49:02.400,0:49:07.680\nis out there for me to process and then he's\xa0\ndone his witnesses. So if we look at a '--verbose'"),(0,o.kt)("p",null,"0:49:08.720,0:49:13.520\nhere, this is his inception event because it's\xa0\na delegated identifier, it's a different tag,"),(0,o.kt)("p",null,"0:49:13.520,0:49:18.560\nor sorry, different type for the\xa0\ninception event, a 'dip' instead of an 'icp'"),(0,o.kt)("p",null,"0:49:20.000,0:49:25.520\nand the only other difference here is the last\xa0\nfield is a 'di' which is the delegating identifier"),(0,o.kt)("p",null,"0:49:26.480,0:49:31.680\nand that is the delegator, so then anyone\xa0\nprocessing this will know that this is a delegated"),(0,o.kt)("p",null,"0:49:31.680,0:49:36.800\nidentifier and any event that he processes has to\xa0\nbe approved by this guy, for it to be a valid event"),(0,o.kt)("p",null,"0:49:37.360,0:49:44.880\nNow notice here his identifier is 'EY7' because\xa0\nit's an inception event, I said that backwards,"),(0,o.kt)("p",null,"0:49:44.880,0:49:49.120\n{tries again: -> } This is the identifier, because there's\xa0\nan inception event, the SAID of this is the same,"),(0,o.kt)("p",null,"0:49:49.680,0:49:57.840\nso these are the two, and here's a sequence number\xa0\n'0'. So now, if we take a look at the delegator"),(0,o.kt)("p",null,"0:50:02.400,0:50:09.280\nyou can see his rotation event here,\xa0\nthis is the approval and that 'EY7'"),(0,o.kt)("p",null,"0:50:09.280,0:50:15.040\nis the identifier as well as the SAID or\xa0\ndigest of the event that he approved and"),(0,o.kt)("p",null,"0:50:15.040,0:50:20.640\nhe has anchored that data; thus approving\xa0\nthe delegation request from the other guy."),(0,o.kt)("p",null,"0:50:24.240,0:50:29.520\nAll right so that makes sense? Steven: Maybe\xa0\none day, yeah, that's what I'm feeding,"),(0,o.kt)("p",null,"0:50:31.200,0:50:35.200\nit's so inspiring. Phil (laughing): \"yes there's\xa0\na lot, there's a lot here."),(0,o.kt)("p",null,"0:50:37.040,0:50:41.360\nAll right we have eight minutes I will try and\xa0\nget through multisig actually you know what no"),(0,o.kt)("p",null,"0:50:41.360,0:50:45.920\nSteven: No rushing in my account, I mean, I understand\xa0\nyou're on vacation here, but don't worry"),(0,o.kt)("p",null,"0:50:45.920,0:50:51.440\nabout my time. Phil: Yeah, I know, I have\xa0\nanother meeting, I have to get to. Steven: Oh okay, not only"),(0,o.kt)("p",null,"0:50:51.440,0:50:57.120\nfor visiting the family? Phil: yeah exactly, yeah but not\xa0\nonly that, but I'm out here buying a house,"),(0,o.kt)("p",null,"0:50:57.120,0:51:08.240\nbecause we're moving out here, so all that,\xa0\nas well as work, it's been very very busy."),(0,o.kt)("p",null,"0:51:08.240,0:51:09.920\nAll right, so let me show\xa0\nyou the agent really quickly."),(0,o.kt)("p",null,"0:51:12.640,0:51:21.840\nSo here we start actually. I don't need the\xa0\nwitnesses but anyway so we will run 'kli'"),(0,o.kt)("p",null,"0:51:25.760,0:51:31.200\nSo I'm running 'kli agent demo', just like\xa0\nthe demo command down here, he starts,"),(0,o.kt)("p",null,"0:51:32.480,0:51:37.040\nexcept in this case, he starts four well-known\xa0\nagents and that's because, well I needed to test"),(0,o.kt)("p",null,"0:51:37.040,0:51:43.440\nmulti-sig delegation with two participants in the\xa0\ndelegator, and two participants in the delegatee."),(0,o.kt)("p",null,"0:51:44.320,0:51:52.960\ndelegation coordination I start him with\xa0\na ... (that's not gonna work) Well that's fine, I"),(0,o.kt)("p",null,"0:51:52.960,0:51:59.840\nstarted him with a configuration file that tells\xa0\nhim where these three witnesses are and he starts"),(0,o.kt)("p",null,"0:51:59.840,0:52:05.200\nfour agents on these well-known ports again with\xa0\nactually he doesn't have well-known salts because"),(0,o.kt)("p",null,"0:52:05.840,0:52:12.720\nyou do those via the CURL commands so once\xa0\nyou start those agents, let's see, here we go,"),(0,o.kt)("p",null,"0:52:14.960,0:52:22.640\nyou get on each of those ports a Swagger U/I\nwhich contains the available API calls."),(0,o.kt)("p",null,"0:52:22.640,0:52:29.200\nFor the agent depending on his state. Every\xa0\nagent initially starts off in a locked state."),(0,o.kt)("p",null,"0:52:29.200,0:52:33.280\nso think of a ..., remember when we did the 'kli\xa0\ninit' commands and created the data store"),(0,o.kt)("p",null,"0:52:34.880,0:52:38.160\nthat data store is now encrypted\xa0\nand locked, if you gave it a passcode."),(0,o.kt)("p",null,"0:52:38.720,0:52:43.200\nSo in this case we don't have any data stores\xa0\nyet, so you can start an agent with no data stores"),(0,o.kt)("p",null,"0:52:43.200,0:52:51.840\naround and that's when you end up in this state. So\xa0\nin order our passcode requirement for creating an"),(0,o.kt)("p",null,"0:52:51.840,0:52:56.800\nencrypted key store is a 22 character passcode we\xa0\ngive you just a little helper function. This isn't"),(0,o.kt)("p",null,"0:52:56.800,0:53:01.600\nreally part of KERI, but we give you a little\xa0\nhelper function for, (my grandson is really unhappy),"),(0,o.kt)("p",null,'0:53:04.320,0:53:09.520\nfor just generating random passcodes if you need\xa0\nthat, you can also use "OnePass" or whatever to'),(0,o.kt)("p",null,"0:53:09.520,0:53:16.640\ncreate them and then store them in OnePass, so\xa0\nnow just like 'kli init' that creates a key store"),(0,o.kt)("p",null,"0:53:16.640,0:53:23.600\nwe have a POST to '/boot' which will create\xa0\na key store for you, you call it, let's try it"),(0,o.kt)("p",null,"0:53:23.600,0:53:29.920\nout, let's not type into the sample I did that\xa0\nduring the demo too, 'Agent0', and spell agent right"),(0,o.kt)("p",null,"0:53:32.320,0:53:35.440\nand give it the passcode,\xa0\nthat you saved and execute,"),(0,o.kt)("p",null,"0:53:36.720,0:53:44.160\nand you can see the 'agent0' and key\xa0\nstore created and he resolved a whole bunch"),(0,o.kt)("p",null,"0:53:44.160,0:53:47.920\nof OOBIs, that's part of the configuration\xa0\nfile, I guess I do have running the ...,"),(0,o.kt)("p",null,"0:53:48.720,0:53:54.800\nSo, one thing to note about here, is several of\xa0\nthe OOBIs are actually data OOBIs. And we can also"),(0,o.kt)("p",null,"0:53:54.800,0:53:59.440\nuse OOBIs to resolve things like credential\xa0\nschema. So that's a whole separate topic."),(0,o.kt)("p",null,"0:54:01.520,0:54:06.880\nSo, now that we've created the key store the\xa0\nnext step is to unlock it, and so this is like"),(0,o.kt)("p",null,"0:54:07.600,0:54:12.560\nif you ..., so we ran this demo at IIW after\xa0\ndoing our demo hour where we demo-ed the U/I"),(0,o.kt)("p",null,"0:54:12.560,0:54:15.680\nthat we have sitting on top of this to\xa0\nKeep, and so when you get into the Keep,"),(0,o.kt)("p",null,'0:54:15.680,0:54:19.280\nyou get a nice screen that says "hey, create\xa0\nyour passcode", which is that first API call.'),(0,o.kt)("p",null,"0:54:19.280,0:54:23.840\nAnd it uses the top API called to generate\xa0\nrandom keystore keys for people who want samples"),(0,o.kt)("p",null,"0:54:24.480,0:54:29.040\nto use and then we do a PUT against\n'/boot' for unlocking. And that's the next"),(0,o.kt)("p",null,'0:54:29.040,0:54:33.040\nnice block in the U/I that says "now unlock your\xa0\nkey store" Every time you come back into the agent,'),(0,o.kt)("p",null,"0:54:33.040,0:54:37.840\nbecause you already have a key store, you just have\xa0\nto unlock, right, because you've already created it"),(0,o.kt)("p",null,"0:54:41.680,0:54:46.240\nSo we're going to try it out,\nhere we called him 'agent0',"),(0,o.kt)("p",null,"0:54:48.400,0:54:53.600\nand there's the passcode that we use, and we're\xa0\ngoing to execute this and he says \"'agent0' is"),(0,o.kt)("p",null,'0:54:53.600,0:54:58.560\nnow unlocked", and the cool thing about unlocking\xa0\nan agent, is you just reload and you now have a'),(0,o.kt)("p",null,"0:54:58.560,0:55:03.360\nwhole new set of APIs for doing all the things\xa0\nyou would want to do with an agent, and these all"),(0,o.kt)("p",null,"0:55:03.360,0:55:09.520\nmarry up very nicely with the 'kli' commands that\xa0\nwe've been running. Get your list of identifiers,"),(0,o.kt)("p",null,"0:55:11.360,0:55:15.280\nget information about a specific identifier,\xa0\nyou can create a new identifier, this would be"),(0,o.kt)("p",null,"0:55:15.280,0:55:23.600\nlike 'kli incept', you can update, so again not part\xa0\nof KERI but to support a user interface, a wallet"),(0,o.kt)("p",null,"0:55:23.600,0:55:26.960\nfor example, where you're going to have a ton\xa0\nof different identifiers, you need to associate"),(0,o.kt)("p",null,"0:55:26.960,0:55:32.160\nmetadata with those. You give yourself context\xa0\nto remember, you know what organization, who ...,"),(0,o.kt)("p",null,"0:55:32.160,0:55:36.560\nJust think of a standard contact book; that's\xa0\nwhat this API is for us; for updating that."),(0,o.kt)("p",null,'0:55:37.600,0:55:42.160\nAnd because we\'re "zero trust", all that data is\xa0\nsigned at REST, so that if you lose control of'),(0,o.kt)("p",null,"0:55:42.160,0:55:47.680\nyour database, people can't put in like, you know,\xa0\nchange the name of the contact and fake you out,"),(0,o.kt)("p",null,"0:55:47.680,0:55:52.960\nbecause we verify the data when we reload it, and\xa0\nthen you can do a rotation or an interaction event."),(0,o.kt)("p",null,"0:55:53.840,0:55:58.400\nThis is for creating and listing your credential\xa0\nregistries so the public transaction event logs"),(0,o.kt)("p",null,"0:55:58.400,0:56:03.520\nfor anchoring issuance and revocation events\xa0\na presentation request, you can generate"),(0,o.kt)("p",null,"0:56:03.520,0:56:07.520\nyour own OOBI or resolve other people's\xa0\nOOBIs. This is like the 'kli oobi' commands"),(0,o.kt)("p",null,"0:56:08.400,0:56:13.360\nthese are the this is challenge response so one\xa0\nof the requirements of the Keep is that you do a"),(0,o.kt)("p",null,"0:56:13.360,0:56:18.160\ntwo-factor auth, so this is for generating like a\xa0\nlist of challenge words, that's what this guy does."),(0,o.kt)("p",null,"0:56:18.160,0:56:23.040\nWhich is just randomly generated challenge words.\xa0\nYou would then take those, send them to another"),(0,o.kt)("p",null,"0:56:23.040,0:56:29.280\nperson using this command. They would then get\xa0\na notification that someone has challenged them."),(0,o.kt)("p",null,"0:56:29.280,0:56:33.040\nThey sign it with that identifier and send it\xa0\nback and now you have proven that they have"),(0,o.kt)("p",null,"0:56:33.040,0:56:38.000\ncontrol of your identifier, and that was actually a\xa0\nbig part of the demo, that we did during demo hour."),(0,o.kt)("p",null,"0:56:41.360,0:56:45.600\nThis is more information about getting, about\xa0\ngetting an updating contact information."),(0,o.kt)("p",null,"0:56:45.600,0:56:49.680\nWe also support images. We don't sign those yet\xa0\nand Samuel (Smith, ed.) says to me that we have to sign them."),(0,o.kt)("p",null,"0:56:49.680,0:56:54.720\n{ some domestic situation itemised :) } And then this is\xa0\nfor getting the schema, that we loaded via the"),(0,o.kt)("p",null,"0:56:54.720,0:56:59.200\nOOBIs, that I showed you at the beginning, this is\xa0\ndiagnostics we're taking a look at, the escrow"),(0,o.kt)("p",null,"0:56:59.200,0:57:03.120\nstatus, because all events are asynchronous,\xa0\npassing events around, you can get them out"),(0,o.kt)("p",null,"0:57:03.120,0:57:06.560\nof order, you can get them without full signatures,\xa0\nwithout full witness receipts, and we have a whole"),(0,o.kt)("p",null,"0:57:06.560,0:57:12.560\nseries of escrows, that the events just sit in, that\xa0\nwe constantly check for any other event to come in,"),(0,o.kt)("p",null,"0:57:12.560,0:57:19.920\nto resolve them out of their current state, this is\xa0\nfor mailbox notifications, so this is a 'server-"),(0,o.kt)("p",null,"0:57:19.920,0:57:26.400\nsent events', streaming service for the agent U/I, \xa0\nto get notifications from the KERI system itself,"),(0,o.kt)("p",null,"0:57:28.320,0:57:33.680\nthese are all the APIs for performing multisig\xa0\nand these are APIs for doing credentialing with"),(0,o.kt)("p",null,"0:57:33.680,0:57:37.040\na multi-sig identifier. And the reason why\xa0\nthese have to be different, is because there's"),(0,o.kt)("p",null,"0:57:37.040,0:57:43.120\ncommunication involved. Someone leads the process\xa0\nthat would be with a POST, and then others call PUT"),(0,o.kt)("p",null,"0:57:43.120,0:57:48.720\nto participate in the process. And so, for example\xa0\nif I have an identifier, if you and I are sharing"),(0,o.kt)("p",null,"0:57:48.720,0:57:54.480\nan identifier, where you have a private key and I\xa0\nhave a private key, I would initiate it and then"),(0,o.kt)("p",null,'0:57:54.480,0:57:58.400\nsend, the system would send the credential to you,\xa0\nyou would look at the credentials, say "Yep, this is'),(0,o.kt)("p",null,'0:57:58.400,0:58:03.120\nthe one we agreed to issue". You would then do a PUT\nwith that credential and your signature, and then'),(0,o.kt)("p",null,"0:58:03.120,0:58:08.240\nit would become a valid credential. And we do\xa0\nhave scripts, and all that, we can go through that"),(0,o.kt)("p",null,"0:58:08.240,0:58:13.120\nMaybe you and I can schedule something next week,\xa0\nand we can go forward and do the multi-sig stuff"),(0,o.kt)("p",null,"0:58:13.920,0:58:21.200\nOkay, all right, so that's most of what\xa0\nI did. We had an hour and a half, when I was at"),(0,o.kt)("p",null,"0:58:21.200,0:58:27.920\nat IIW. Because I did it over the working lunch\xa0\nsession (which meant I didn't get to eat) and we"),(0,o.kt)("p",null,"0:58:27.920,0:58:32.800\nwent on through the next set of scripts, which is\xa0\nmulti-sig and then multi-sig delegation on both"),(0,o.kt)("p",null,"0:58:32.800,0:58:36.560\nthe delegator and the delegatee. And that was fun\xa0\nbecause you get four windows running, and they're"),(0,o.kt)("p",null,"0:58:36.560,0:58:40.880\nall waiting for each other. And when you're to\xa0\nfinally fire off the final one, they all just resolve,"),(0,o.kt)("p",null,"0:58:40.880,0:58:45.440\nwith signed events everywhere, It's really cool so\xa0\nmaybe we can do that sometime next week. Steven: okay")))}p.isMDXComponent=!0}}]);