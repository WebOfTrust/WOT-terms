"use strict";(self.webpackChunkwot_terms_docusaurus=self.webpackChunkwot_terms_docusaurus||[]).push([[73658],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},39855:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i=void 0,l={unversionedId:"glossary/run-off-the-crud",id:"glossary/run-off-the-crud",title:"run-off-the-crud",description:"Definition",source:"@site/docs/04_glossary/run-off-the-crud.md",sourceDirName:"04_glossary",slug:"/glossary/run-off-the-crud",permalink:"/WOT-terms/docs/glossary/run-off-the-crud",draft:!1,editUrl:"https://github.com/WebOfTrust/WOT-terms/tree/main/docs/04_glossary/run-off-the-crud.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rpy",permalink:"/WOT-terms/docs/glossary/rpy"},next:{title:"sally",permalink:"/WOT-terms/docs/glossary/sally"}},s={},c=[{value:"Definition",id:"definition",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"RUN off the ",(0,a.kt)("a",{parentName:"em",href:"CRUD"},"CRUD"))," "),(0,a.kt)("p",null,"RUN stands for Read , Update,  Nullify. Why is it preferred ('run off') over the CRUD (Create, Update, Delete)?"),(0,a.kt)("p",null,"Consider the need to protect '",(0,a.kt)("em",{parentName:"p"},"authentic data"),"' in a decentralized environment."),(0,a.kt)("p",null,"In a decentralized control model, the data always originates from a controller (aka client). The data created (sourced) by the controller follows the principle of '",(0,a.kt)("em",{parentName:"p"},"Non-Interactive Replay Monotonicity"),"' to be able to protect the data from a replay (events are changed) or a deletion (some events are deleted) attacks. That is to say, the data (or events comprising it) is never deleted, it's rather always added to via updates. Each update, therefore, forms a verifiable, continuous log ( e.g. by providing growing sequence number, date timestamp, etc for each update). To enable invalidation of data, a special update, called Nullify, is used."),(0,a.kt)("p",null,"The client, therefore, updates the server (it's peer or peers), which just maintains the log following certain rules (see ",(0,a.kt)("a",{parentName:"p",href:"best-available-data-acceptance-mechanism"},"BADA")," - Best Available Data Acceptance)."),(0,a.kt)("p",null,"To summarise, the server can only Read the log, add Updates to it, including Nullifying ones. So ",(0,a.kt)("em",{parentName:"p"},"no")," Create or Delete."))}d.isMDXComponent=!0}}]);