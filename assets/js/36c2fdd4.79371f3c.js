"use strict";(self.webpackChunkwot_terms_docusaurus=self.webpackChunkwot_terms_docusaurus||[]).push([[23705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=m(n),c=a,d=f["".concat(l,".").concat(c)]||f[c]||u[c]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},75153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,s={unversionedId:"glossary/ample",id:"glossary/ample",title:"ample",description:"Definition",source:"@site/docs/04_glossary/ample.md",sourceDirName:"04_glossary",slug:"/glossary/ample",permalink:"/WOT-terms/docs/glossary/ample",draft:!1,editUrl:"https://github.com/WebOfTrust/WOT-terms/tree/main/docs/04_glossary/ample.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ambient-verifiability",permalink:"/WOT-terms/docs/glossary/ambient-verifiability"},next:{title:"append-only-event-logs",permalink:"/WOT-terms/docs/glossary/append-only-event-logs"}},l={},m=[{value:"Definition",id:"definition",level:2},{value:"Problems avoided by using <code>ample</code>",id:"problems-avoided-by-using-ample",level:2},{value:"Table of minimum required, or ample, number of participants",id:"table-of-minimum-required-or-ample-number-of-participants",level:2},{value:"Code Example",id:"code-example",level:2}],p={toc:m},f="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("p",null,"The minimum required number of participants in an event to have a ",(0,a.kt)("a",{parentName:"p",href:"supermajority"},"supermajority")," so that one and only one agreement or consensus on an event may be reached. This is a critical part of the ",(0,a.kt)("a",{parentName:"p",href:"KAACE"},"KAACE")," agreement algorithm (consensus) in KERI for establishing consensus between witnesses on the key state of a KERI identifier. This consensus on key state forms the basis for accountability for a KERI controller, or what a person who controls a KERI identifier may be held legally responsible for."),(0,a.kt)("p",null,"This supermajority is also called a ",(0,a.kt)("em",{parentName:"p"},"sufficient majority")," that is labeled ",(0,a.kt)("em",{parentName:"p"},"immune")," from certain kinds of attacks or faults. "),(0,a.kt)("p",null,"From section ",(0,a.kt)("strong",{parentName:"p"},"11.4.2.4 Immune")," of v2.60 of the KERI whitepaper, "),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Satisfaction of this constraint guarantees that at most one sufficient agreement occurs or none at\nall despite a dishonest controller but where at most F of the witnesses are potentially faulty.")),(0,a.kt)("p",null,"Ample Agreement Constraint:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("img",{parentName:"p",src:"https://github.com/WebOfTrust/WOT-terms/assets/65027257/5c8733c1-4370-420c-83f0-f6e778a6b68f",alt:"image"})),(0,a.kt)("p",null,"Can apply to either"),(0,a.kt)("p",null,"1) a group of KERI witnesses for a witnessed event or\n2) a group of KERI identifier controllers participating in a multi-signature group."),(0,a.kt)("h2",{id:"problems-avoided-by-using-ample"},"Problems avoided by using ",(0,a.kt)("inlineCode",{parentName:"h2"},"ample")),(0,a.kt)("p",null,'Ample witnesses avoids problems of accidental lockout from a multisig group which would occur if the signing threshold for the multisig group was set lower than the "ample" number of participants.'),(0,a.kt)("h2",{id:"table-of-minimum-required-or-ample-number-of-participants"},"Table of minimum required, or ample, number of participants"),(0,a.kt)("p",null,"N = Number of total participants",(0,a.kt)("br",{parentName:"p"}),"\n",'M = Number of participants needed to get the guarantees of "ample"'),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/WebOfTrust/WOT-terms/assets/65027257/01363aeb-7055-4413-bbc4-8f89325e703a",alt:"image"})),(0,a.kt)("h2",{id:"code-example"},"Code Example"),(0,a.kt)("p",null,"Python code implementation from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WebOfTrust/keripy/blob/development/src/keri/core/eventing.py"},"keri.core.eventing.py")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ample")," algorithm used in ",(0,a.kt)("a",{parentName:"p",href:"KAACE"},"KAACE"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def ample(n, f=None, weak=True):\n    """\n    Returns int as sufficient immune (ample) majority of n when n >=1\n        otherwise returns 0\n    Parameters:\n        n is int total number of elements\n        f is int optional fault number\n        weak is Boolean\n            If f is not None and\n                weak is True then minimize m for f\n                weak is False then maximize m for f that satisfies n >= 3*f+1\n            Else\n                weak is True then find maximum f and minimize m\n                weak is False then find maximum f and maximize m\n\n        n,m,f are subject to\n        f >= 1 if n > 0\n        n >= 3*f+1\n        (n+f+1)/2 <= m <= n-f\n    """\n    n = max(0, n)  # no negatives\n    if f is None:\n        f1 = max(1, max(0, n - 1) // 3)  # least floor f subject to n >= 3*f+1\n        f2 = max(1, ceil(max(0, n - 1) / 3))  # most ceil f subject to n >= 3*f+1\n        if weak:  # try both fs to see which one has lowest m\n            return min(n, ceil((n + f1 + 1) / 2), ceil((n + f2 + 1) / 2))\n        else:\n            return min(n, max(0, n - f1, ceil((n + f1 + 1) / 2)))\n    else:\n        f = max(0, f)\n        m1 = ceil((n + f + 1) / 2)\n        m2 = max(0, n - f)\n        if m2 < m1 and n > 0:\n            raise ValueError("Invalid f={} is too big for n={}.".format(f, n))\n        if weak:\n            return min(n, m1, m2)\n        else:\n            return min(n, max(m1, m2))\n')))}u.isMDXComponent=!0}}]);